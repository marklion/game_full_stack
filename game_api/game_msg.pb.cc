// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_msg.proto

#include "game_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_game_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_game_poker_card_game_5fmsg_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_game_5fmsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_table_seat_player_game_5fmsg_2eproto;
namespace game {
class sync_sessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sync_session> _instance;
} _sync_session_default_instance_;
class game_mng_resultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<game_mng_result> _instance;
} _game_mng_result_default_instance_;
class user_loginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<user_login> _instance;
} _user_login_default_instance_;
class user_qq_loginDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<user_qq_login> _instance;
} _user_qq_login_default_instance_;
class user_login_respDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<user_login_resp> _instance;
} _user_login_resp_default_instance_;
class user_info_respDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<user_info_resp> _instance;
} _user_info_resp_default_instance_;
class add_cash_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<add_cash_req> _instance;
} _add_cash_req_default_instance_;
class create_table_respDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<create_table_resp> _instance;
} _create_table_resp_default_instance_;
class table_seat_playerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<table_seat_player> _instance;
} _table_seat_player_default_instance_;
class game_poker_cardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<game_poker_card> _instance;
} _game_poker_card_default_instance_;
class table_info_syncDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<table_info_sync> _instance;
} _table_info_sync_default_instance_;
class player_sit_down_reqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<player_sit_down_req> _instance;
} _player_sit_down_req_default_instance_;
class player_self_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<player_self_info> _instance;
} _player_self_info_default_instance_;
class player_hand_card_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<player_hand_card_info> _instance;
} _player_hand_card_info_default_instance_;
class player_actionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<player_action> _instance;
} _player_action_default_instance_;
}  // namespace game
static void InitDefaultsscc_info_add_cash_req_game_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_add_cash_req_default_instance_;
    new (ptr) ::game::add_cash_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::add_cash_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_add_cash_req_game_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_add_cash_req_game_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_create_table_resp_game_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_create_table_resp_default_instance_;
    new (ptr) ::game::create_table_resp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::create_table_resp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_create_table_resp_game_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_create_table_resp_game_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_game_mng_result_game_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_game_mng_result_default_instance_;
    new (ptr) ::game::game_mng_result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::game_mng_result::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_game_mng_result_game_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_game_mng_result_game_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_game_poker_card_game_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_game_poker_card_default_instance_;
    new (ptr) ::game::game_poker_card();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::game_poker_card::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_game_poker_card_game_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_game_poker_card_game_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_player_action_game_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_player_action_default_instance_;
    new (ptr) ::game::player_action();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::player_action::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_player_action_game_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_player_action_game_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_player_hand_card_info_game_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_player_hand_card_info_default_instance_;
    new (ptr) ::game::player_hand_card_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::player_hand_card_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_player_hand_card_info_game_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_player_hand_card_info_game_5fmsg_2eproto}, {
      &scc_info_game_poker_card_game_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_player_self_info_game_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_player_self_info_default_instance_;
    new (ptr) ::game::player_self_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::player_self_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_player_self_info_game_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_player_self_info_game_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_player_sit_down_req_game_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_player_sit_down_req_default_instance_;
    new (ptr) ::game::player_sit_down_req();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::player_sit_down_req::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_player_sit_down_req_game_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_player_sit_down_req_game_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_sync_session_game_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_sync_session_default_instance_;
    new (ptr) ::game::sync_session();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::sync_session::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_sync_session_game_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_sync_session_game_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_table_info_sync_game_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_table_info_sync_default_instance_;
    new (ptr) ::game::table_info_sync();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::table_info_sync::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_table_info_sync_game_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_table_info_sync_game_5fmsg_2eproto}, {
      &scc_info_table_seat_player_game_5fmsg_2eproto.base,
      &scc_info_game_poker_card_game_5fmsg_2eproto.base,}};

static void InitDefaultsscc_info_table_seat_player_game_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_table_seat_player_default_instance_;
    new (ptr) ::game::table_seat_player();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::table_seat_player::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_table_seat_player_game_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_table_seat_player_game_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_user_info_resp_game_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_user_info_resp_default_instance_;
    new (ptr) ::game::user_info_resp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::user_info_resp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_user_info_resp_game_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_user_info_resp_game_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_user_login_game_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_user_login_default_instance_;
    new (ptr) ::game::user_login();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::user_login::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_user_login_game_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_user_login_game_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_user_login_resp_game_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_user_login_resp_default_instance_;
    new (ptr) ::game::user_login_resp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::user_login_resp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_user_login_resp_game_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_user_login_resp_game_5fmsg_2eproto}, {}};

static void InitDefaultsscc_info_user_qq_login_game_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::game::_user_qq_login_default_instance_;
    new (ptr) ::game::user_qq_login();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::game::user_qq_login::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_user_qq_login_game_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_user_qq_login_game_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_game_5fmsg_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_game_5fmsg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_game_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_game_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::sync_session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::sync_session, session_),
  PROTOBUF_FIELD_OFFSET(::game::sync_session, table_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::game_mng_result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::game_mng_result, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::user_login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::user_login, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::user_qq_login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::user_qq_login, openid_),
  PROTOBUF_FIELD_OFFSET(::game::user_qq_login, acctok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::user_login_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::user_login_resp, result_),
  PROTOBUF_FIELD_OFFSET(::game::user_login_resp, session_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::user_info_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::user_info_resp, user_name_),
  PROTOBUF_FIELD_OFFSET(::game::user_info_resp, user_logo_),
  PROTOBUF_FIELD_OFFSET(::game::user_info_resp, user_cash_),
  PROTOBUF_FIELD_OFFSET(::game::user_info_resp, table_no_),
  PROTOBUF_FIELD_OFFSET(::game::user_info_resp, seat_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::add_cash_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::add_cash_req, ssid_),
  PROTOBUF_FIELD_OFFSET(::game::add_cash_req, cash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::create_table_resp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::create_table_resp, result_),
  PROTOBUF_FIELD_OFFSET(::game::create_table_resp, table_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::table_seat_player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::table_seat_player, seat_no_),
  PROTOBUF_FIELD_OFFSET(::game::table_seat_player, name_),
  PROTOBUF_FIELD_OFFSET(::game::table_seat_player, total_cash_),
  PROTOBUF_FIELD_OFFSET(::game::table_seat_player, bat_cash_),
  PROTOBUF_FIELD_OFFSET(::game::table_seat_player, logo_),
  PROTOBUF_FIELD_OFFSET(::game::table_seat_player, is_fall_),
  PROTOBUF_FIELD_OFFSET(::game::table_seat_player, is_all_in_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::game_poker_card, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::game_poker_card, color_),
  PROTOBUF_FIELD_OFFSET(::game::game_poker_card, number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::table_info_sync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::table_info_sync, table_no_),
  PROTOBUF_FIELD_OFFSET(::game::table_info_sync, players_),
  PROTOBUF_FIELD_OFFSET(::game::table_info_sync, dealer_pos_),
  PROTOBUF_FIELD_OFFSET(::game::table_info_sync, action_pos_),
  PROTOBUF_FIELD_OFFSET(::game::table_info_sync, min_bat_),
  PROTOBUF_FIELD_OFFSET(::game::table_info_sync, table_cards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::player_sit_down_req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::player_sit_down_req, seat_no_),
  PROTOBUF_FIELD_OFFSET(::game::player_sit_down_req, carry_cash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::player_self_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::player_self_info, seat_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::player_hand_card_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::player_hand_card_info, first_),
  PROTOBUF_FIELD_OFFSET(::game::player_hand_card_info, second_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::player_action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::game::player_action, action_),
  PROTOBUF_FIELD_OFFSET(::game::player_action, cash_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::game::sync_session)},
  { 7, -1, sizeof(::game::game_mng_result)},
  { 13, -1, sizeof(::game::user_login)},
  { 19, -1, sizeof(::game::user_qq_login)},
  { 26, -1, sizeof(::game::user_login_resp)},
  { 33, -1, sizeof(::game::user_info_resp)},
  { 43, -1, sizeof(::game::add_cash_req)},
  { 50, -1, sizeof(::game::create_table_resp)},
  { 57, -1, sizeof(::game::table_seat_player)},
  { 69, -1, sizeof(::game::game_poker_card)},
  { 76, -1, sizeof(::game::table_info_sync)},
  { 87, -1, sizeof(::game::player_sit_down_req)},
  { 94, -1, sizeof(::game::player_self_info)},
  { 100, -1, sizeof(::game::player_hand_card_info)},
  { 107, -1, sizeof(::game::player_action)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_sync_session_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_game_mng_result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_user_login_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_user_qq_login_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_user_login_resp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_user_info_resp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_add_cash_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_create_table_resp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_table_seat_player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_game_poker_card_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_table_info_sync_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_player_sit_down_req_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_player_self_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_player_hand_card_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::game::_player_action_default_instance_),
};

const char descriptor_table_protodef_game_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016game_msg.proto\022\004game\"1\n\014sync_session\022\017"
  "\n\007session\030\001 \001(\t\022\020\n\010table_no\030\002 \001(\005\"!\n\017gam"
  "e_mng_result\022\016\n\006result\030\001 \001(\010\"\032\n\nuser_log"
  "in\022\014\n\004code\030\001 \001(\t\"/\n\ruser_qq_login\022\016\n\006ope"
  "nid\030\001 \001(\t\022\016\n\006acctok\030\002 \001(\t\"2\n\017user_login_"
  "resp\022\016\n\006result\030\001 \001(\010\022\017\n\007session\030\002 \001(\t\"l\n"
  "\016user_info_resp\022\021\n\tuser_name\030\001 \001(\t\022\021\n\tus"
  "er_logo\030\002 \001(\t\022\021\n\tuser_cash\030\003 \001(\005\022\020\n\010tabl"
  "e_no\030\004 \001(\005\022\017\n\007seat_no\030\005 \001(\005\"*\n\014add_cash_"
  "req\022\014\n\004ssid\030\001 \001(\t\022\014\n\004cash\030\002 \001(\005\"5\n\021creat"
  "e_table_resp\022\016\n\006result\030\001 \001(\010\022\020\n\010table_no"
  "\030\002 \001(\005\"\212\001\n\021table_seat_player\022\017\n\007seat_no\030"
  "\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\022\n\ntotal_cash\030\003 \001(\005\022"
  "\020\n\010bat_cash\030\004 \001(\005\022\014\n\004logo\030\005 \001(\t\022\017\n\007is_fa"
  "ll\030\006 \001(\010\022\021\n\tis_all_in\030\007 \001(\010\"0\n\017game_poke"
  "r_card\022\r\n\005color\030\001 \001(\005\022\016\n\006number\030\002 \001(\005\"\262\001"
  "\n\017table_info_sync\022\020\n\010table_no\030\001 \001(\005\022(\n\007p"
  "layers\030\002 \003(\0132\027.game.table_seat_player\022\022\n"
  "\ndealer_pos\030\003 \001(\005\022\022\n\naction_pos\030\004 \001(\005\022\017\n"
  "\007min_bat\030\005 \001(\005\022*\n\013table_cards\030\006 \003(\0132\025.ga"
  "me.game_poker_card\":\n\023player_sit_down_re"
  "q\022\017\n\007seat_no\030\001 \001(\005\022\022\n\ncarry_cash\030\002 \001(\005\"#"
  "\n\020player_self_info\022\017\n\007seat_no\030\001 \001(\005\"d\n\025p"
  "layer_hand_card_info\022$\n\005first\030\001 \001(\0132\025.ga"
  "me.game_poker_card\022%\n\006second\030\002 \001(\0132\025.gam"
  "e.game_poker_card\"-\n\rplayer_action\022\016\n\006ac"
  "tion\030\001 \001(\005\022\014\n\004cash\030\002 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_game_5fmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_game_5fmsg_2eproto_sccs[15] = {
  &scc_info_add_cash_req_game_5fmsg_2eproto.base,
  &scc_info_create_table_resp_game_5fmsg_2eproto.base,
  &scc_info_game_mng_result_game_5fmsg_2eproto.base,
  &scc_info_game_poker_card_game_5fmsg_2eproto.base,
  &scc_info_player_action_game_5fmsg_2eproto.base,
  &scc_info_player_hand_card_info_game_5fmsg_2eproto.base,
  &scc_info_player_self_info_game_5fmsg_2eproto.base,
  &scc_info_player_sit_down_req_game_5fmsg_2eproto.base,
  &scc_info_sync_session_game_5fmsg_2eproto.base,
  &scc_info_table_info_sync_game_5fmsg_2eproto.base,
  &scc_info_table_seat_player_game_5fmsg_2eproto.base,
  &scc_info_user_info_resp_game_5fmsg_2eproto.base,
  &scc_info_user_login_game_5fmsg_2eproto.base,
  &scc_info_user_login_resp_game_5fmsg_2eproto.base,
  &scc_info_user_qq_login_game_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_game_5fmsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fmsg_2eproto = {
  false, false, descriptor_table_protodef_game_5fmsg_2eproto, "game_msg.proto", 1072,
  &descriptor_table_game_5fmsg_2eproto_once, descriptor_table_game_5fmsg_2eproto_sccs, descriptor_table_game_5fmsg_2eproto_deps, 15, 0,
  schemas, file_default_instances, TableStruct_game_5fmsg_2eproto::offsets,
  file_level_metadata_game_5fmsg_2eproto, 15, file_level_enum_descriptors_game_5fmsg_2eproto, file_level_service_descriptors_game_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_game_5fmsg_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_game_5fmsg_2eproto)), true);
namespace game {

// ===================================================================

void sync_session::InitAsDefaultInstance() {
}
class sync_session::_Internal {
 public:
};

sync_session::sync_session(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.sync_session)
}
sync_session::sync_session(const sync_session& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session().empty()) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_session(),
      GetArena());
  }
  table_no_ = from.table_no_;
  // @@protoc_insertion_point(copy_constructor:game.sync_session)
}

void sync_session::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_sync_session_game_5fmsg_2eproto.base);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  table_no_ = 0;
}

sync_session::~sync_session() {
  // @@protoc_insertion_point(destructor:game.sync_session)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void sync_session::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void sync_session::ArenaDtor(void* object) {
  sync_session* _this = reinterpret_cast< sync_session* >(object);
  (void)_this;
}
void sync_session::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void sync_session::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sync_session& sync_session::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sync_session_game_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void sync_session::Clear() {
// @@protoc_insertion_point(message_clear_start:game.sync_session)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  table_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* sync_session::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.sync_session.session"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 table_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          table_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* sync_session::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.sync_session)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.sync_session.session");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session(), target);
  }

  // int32 table_no = 2;
  if (this->table_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_table_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.sync_session)
  return target;
}

size_t sync_session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.sync_session)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session());
  }

  // int32 table_no = 2;
  if (this->table_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_table_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sync_session::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.sync_session)
  GOOGLE_DCHECK_NE(&from, this);
  const sync_session* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sync_session>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.sync_session)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.sync_session)
    MergeFrom(*source);
  }
}

void sync_session::MergeFrom(const sync_session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.sync_session)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session().size() > 0) {
    _internal_set_session(from._internal_session());
  }
  if (from.table_no() != 0) {
    _internal_set_table_no(from._internal_table_no());
  }
}

void sync_session::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.sync_session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sync_session::CopyFrom(const sync_session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.sync_session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sync_session::IsInitialized() const {
  return true;
}

void sync_session::InternalSwap(sync_session* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  session_.Swap(&other->session_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(table_no_, other->table_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata sync_session::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void game_mng_result::InitAsDefaultInstance() {
}
class game_mng_result::_Internal {
 public:
};

game_mng_result::game_mng_result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.game_mng_result)
}
game_mng_result::game_mng_result(const game_mng_result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:game.game_mng_result)
}

void game_mng_result::SharedCtor() {
  result_ = false;
}

game_mng_result::~game_mng_result() {
  // @@protoc_insertion_point(destructor:game.game_mng_result)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void game_mng_result::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void game_mng_result::ArenaDtor(void* object) {
  game_mng_result* _this = reinterpret_cast< game_mng_result* >(object);
  (void)_this;
}
void game_mng_result::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void game_mng_result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const game_mng_result& game_mng_result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_game_mng_result_game_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void game_mng_result::Clear() {
// @@protoc_insertion_point(message_clear_start:game.game_mng_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* game_mng_result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* game_mng_result::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.game_mng_result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.game_mng_result)
  return target;
}

size_t game_mng_result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.game_mng_result)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void game_mng_result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.game_mng_result)
  GOOGLE_DCHECK_NE(&from, this);
  const game_mng_result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<game_mng_result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.game_mng_result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.game_mng_result)
    MergeFrom(*source);
  }
}

void game_mng_result::MergeFrom(const game_mng_result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.game_mng_result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void game_mng_result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.game_mng_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_mng_result::CopyFrom(const game_mng_result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.game_mng_result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_mng_result::IsInitialized() const {
  return true;
}

void game_mng_result::InternalSwap(game_mng_result* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata game_mng_result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void user_login::InitAsDefaultInstance() {
}
class user_login::_Internal {
 public:
};

user_login::user_login(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.user_login)
}
user_login::user_login(const user_login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_code(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:game.user_login)
}

void user_login::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_user_login_game_5fmsg_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

user_login::~user_login() {
  // @@protoc_insertion_point(destructor:game.user_login)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void user_login::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void user_login::ArenaDtor(void* object) {
  user_login* _this = reinterpret_cast< user_login* >(object);
  (void)_this;
}
void user_login::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void user_login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const user_login& user_login::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_user_login_game_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void user_login::Clear() {
// @@protoc_insertion_point(message_clear_start:game.user_login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user_login::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.user_login.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* user_login::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.user_login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.user_login.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.user_login)
  return target;
}

size_t user_login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.user_login)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void user_login::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.user_login)
  GOOGLE_DCHECK_NE(&from, this);
  const user_login* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<user_login>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.user_login)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.user_login)
    MergeFrom(*source);
  }
}

void user_login::MergeFrom(const user_login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.user_login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
}

void user_login::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.user_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_login::CopyFrom(const user_login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.user_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_login::IsInitialized() const {
  return true;
}

void user_login::InternalSwap(user_login* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata user_login::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void user_qq_login::InitAsDefaultInstance() {
}
class user_qq_login::_Internal {
 public:
};

user_qq_login::user_qq_login(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.user_qq_login)
}
user_qq_login::user_qq_login(const user_qq_login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  openid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_openid().empty()) {
    openid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_openid(),
      GetArena());
  }
  acctok_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_acctok().empty()) {
    acctok_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_acctok(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:game.user_qq_login)
}

void user_qq_login::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_user_qq_login_game_5fmsg_2eproto.base);
  openid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  acctok_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

user_qq_login::~user_qq_login() {
  // @@protoc_insertion_point(destructor:game.user_qq_login)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void user_qq_login::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  openid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  acctok_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void user_qq_login::ArenaDtor(void* object) {
  user_qq_login* _this = reinterpret_cast< user_qq_login* >(object);
  (void)_this;
}
void user_qq_login::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void user_qq_login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const user_qq_login& user_qq_login::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_user_qq_login_game_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void user_qq_login::Clear() {
// @@protoc_insertion_point(message_clear_start:game.user_qq_login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  openid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  acctok_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user_qq_login::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string openid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_openid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.user_qq_login.openid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string acctok = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_acctok();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.user_qq_login.acctok"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* user_qq_login::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.user_qq_login)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string openid = 1;
  if (this->openid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_openid().data(), static_cast<int>(this->_internal_openid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.user_qq_login.openid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_openid(), target);
  }

  // string acctok = 2;
  if (this->acctok().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_acctok().data(), static_cast<int>(this->_internal_acctok().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.user_qq_login.acctok");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_acctok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.user_qq_login)
  return target;
}

size_t user_qq_login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.user_qq_login)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string openid = 1;
  if (this->openid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_openid());
  }

  // string acctok = 2;
  if (this->acctok().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_acctok());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void user_qq_login::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.user_qq_login)
  GOOGLE_DCHECK_NE(&from, this);
  const user_qq_login* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<user_qq_login>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.user_qq_login)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.user_qq_login)
    MergeFrom(*source);
  }
}

void user_qq_login::MergeFrom(const user_qq_login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.user_qq_login)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.openid().size() > 0) {
    _internal_set_openid(from._internal_openid());
  }
  if (from.acctok().size() > 0) {
    _internal_set_acctok(from._internal_acctok());
  }
}

void user_qq_login::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.user_qq_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_qq_login::CopyFrom(const user_qq_login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.user_qq_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_qq_login::IsInitialized() const {
  return true;
}

void user_qq_login::InternalSwap(user_qq_login* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  openid_.Swap(&other->openid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  acctok_.Swap(&other->acctok_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata user_qq_login::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void user_login_resp::InitAsDefaultInstance() {
}
class user_login_resp::_Internal {
 public:
};

user_login_resp::user_login_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.user_login_resp)
}
user_login_resp::user_login_resp(const user_login_resp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session().empty()) {
    session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_session(),
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:game.user_login_resp)
}

void user_login_resp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_user_login_resp_game_5fmsg_2eproto.base);
  session_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = false;
}

user_login_resp::~user_login_resp() {
  // @@protoc_insertion_point(destructor:game.user_login_resp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void user_login_resp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void user_login_resp::ArenaDtor(void* object) {
  user_login_resp* _this = reinterpret_cast< user_login_resp* >(object);
  (void)_this;
}
void user_login_resp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void user_login_resp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const user_login_resp& user_login_resp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_user_login_resp_game_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void user_login_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:game.user_login_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user_login_resp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_session();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.user_login_resp.session"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* user_login_resp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.user_login_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // string session = 2;
  if (this->session().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session().data(), static_cast<int>(this->_internal_session().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.user_login_resp.session");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_session(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.user_login_resp)
  return target;
}

size_t user_login_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.user_login_resp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session = 2;
  if (this->session().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session());
  }

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void user_login_resp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.user_login_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const user_login_resp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<user_login_resp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.user_login_resp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.user_login_resp)
    MergeFrom(*source);
  }
}

void user_login_resp::MergeFrom(const user_login_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.user_login_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session().size() > 0) {
    _internal_set_session(from._internal_session());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void user_login_resp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.user_login_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_login_resp::CopyFrom(const user_login_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.user_login_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_login_resp::IsInitialized() const {
  return true;
}

void user_login_resp::InternalSwap(user_login_resp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  session_.Swap(&other->session_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata user_login_resp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void user_info_resp::InitAsDefaultInstance() {
}
class user_info_resp::_Internal {
 public:
};

user_info_resp::user_info_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.user_info_resp)
}
user_info_resp::user_info_resp(const user_info_resp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_name(),
      GetArena());
  }
  user_logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_logo().empty()) {
    user_logo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_logo(),
      GetArena());
  }
  ::memcpy(&user_cash_, &from.user_cash_,
    static_cast<size_t>(reinterpret_cast<char*>(&seat_no_) -
    reinterpret_cast<char*>(&user_cash_)) + sizeof(seat_no_));
  // @@protoc_insertion_point(copy_constructor:game.user_info_resp)
}

void user_info_resp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_user_info_resp_game_5fmsg_2eproto.base);
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_cash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seat_no_) -
      reinterpret_cast<char*>(&user_cash_)) + sizeof(seat_no_));
}

user_info_resp::~user_info_resp() {
  // @@protoc_insertion_point(destructor:game.user_info_resp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void user_info_resp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_logo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void user_info_resp::ArenaDtor(void* object) {
  user_info_resp* _this = reinterpret_cast< user_info_resp* >(object);
  (void)_this;
}
void user_info_resp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void user_info_resp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const user_info_resp& user_info_resp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_user_info_resp_game_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void user_info_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:game.user_info_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_logo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&user_cash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seat_no_) -
      reinterpret_cast<char*>(&user_cash_)) + sizeof(seat_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* user_info_resp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.user_info_resp.user_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_logo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_logo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.user_info_resp.user_logo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 user_cash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          user_cash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 table_no = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          table_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 seat_no = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          seat_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* user_info_resp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.user_info_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.user_info_resp.user_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_name(), target);
  }

  // string user_logo = 2;
  if (this->user_logo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_logo().data(), static_cast<int>(this->_internal_user_logo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.user_info_resp.user_logo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_logo(), target);
  }

  // int32 user_cash = 3;
  if (this->user_cash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_user_cash(), target);
  }

  // int32 table_no = 4;
  if (this->table_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_table_no(), target);
  }

  // int32 seat_no = 5;
  if (this->seat_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_seat_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.user_info_resp)
  return target;
}

size_t user_info_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.user_info_resp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // string user_logo = 2;
  if (this->user_logo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_logo());
  }

  // int32 user_cash = 3;
  if (this->user_cash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_cash());
  }

  // int32 table_no = 4;
  if (this->table_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_table_no());
  }

  // int32 seat_no = 5;
  if (this->seat_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seat_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void user_info_resp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.user_info_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const user_info_resp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<user_info_resp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.user_info_resp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.user_info_resp)
    MergeFrom(*source);
  }
}

void user_info_resp::MergeFrom(const user_info_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.user_info_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {
    _internal_set_user_name(from._internal_user_name());
  }
  if (from.user_logo().size() > 0) {
    _internal_set_user_logo(from._internal_user_logo());
  }
  if (from.user_cash() != 0) {
    _internal_set_user_cash(from._internal_user_cash());
  }
  if (from.table_no() != 0) {
    _internal_set_table_no(from._internal_table_no());
  }
  if (from.seat_no() != 0) {
    _internal_set_seat_no(from._internal_seat_no());
  }
}

void user_info_resp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.user_info_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_info_resp::CopyFrom(const user_info_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.user_info_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_info_resp::IsInitialized() const {
  return true;
}

void user_info_resp::InternalSwap(user_info_resp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_logo_.Swap(&other->user_logo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(user_info_resp, seat_no_)
      + sizeof(user_info_resp::seat_no_)
      - PROTOBUF_FIELD_OFFSET(user_info_resp, user_cash_)>(
          reinterpret_cast<char*>(&user_cash_),
          reinterpret_cast<char*>(&other->user_cash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata user_info_resp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void add_cash_req::InitAsDefaultInstance() {
}
class add_cash_req::_Internal {
 public:
};

add_cash_req::add_cash_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.add_cash_req)
}
add_cash_req::add_cash_req(const add_cash_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssid().empty()) {
    ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ssid(),
      GetArena());
  }
  cash_ = from.cash_;
  // @@protoc_insertion_point(copy_constructor:game.add_cash_req)
}

void add_cash_req::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_add_cash_req_game_5fmsg_2eproto.base);
  ssid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cash_ = 0;
}

add_cash_req::~add_cash_req() {
  // @@protoc_insertion_point(destructor:game.add_cash_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void add_cash_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ssid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void add_cash_req::ArenaDtor(void* object) {
  add_cash_req* _this = reinterpret_cast< add_cash_req* >(object);
  (void)_this;
}
void add_cash_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void add_cash_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const add_cash_req& add_cash_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_add_cash_req_game_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void add_cash_req::Clear() {
// @@protoc_insertion_point(message_clear_start:game.add_cash_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cash_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* add_cash_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ssid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ssid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.add_cash_req.ssid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* add_cash_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.add_cash_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssid().data(), static_cast<int>(this->_internal_ssid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.add_cash_req.ssid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssid(), target);
  }

  // int32 cash = 2;
  if (this->cash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.add_cash_req)
  return target;
}

size_t add_cash_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.add_cash_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssid = 1;
  if (this->ssid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssid());
  }

  // int32 cash = 2;
  if (this->cash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void add_cash_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.add_cash_req)
  GOOGLE_DCHECK_NE(&from, this);
  const add_cash_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<add_cash_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.add_cash_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.add_cash_req)
    MergeFrom(*source);
  }
}

void add_cash_req::MergeFrom(const add_cash_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.add_cash_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ssid().size() > 0) {
    _internal_set_ssid(from._internal_ssid());
  }
  if (from.cash() != 0) {
    _internal_set_cash(from._internal_cash());
  }
}

void add_cash_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.add_cash_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_cash_req::CopyFrom(const add_cash_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.add_cash_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_cash_req::IsInitialized() const {
  return true;
}

void add_cash_req::InternalSwap(add_cash_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ssid_.Swap(&other->ssid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(cash_, other->cash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata add_cash_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void create_table_resp::InitAsDefaultInstance() {
}
class create_table_resp::_Internal {
 public:
};

create_table_resp::create_table_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.create_table_resp)
}
create_table_resp::create_table_resp(const create_table_resp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_no_) -
    reinterpret_cast<char*>(&result_)) + sizeof(table_no_));
  // @@protoc_insertion_point(copy_constructor:game.create_table_resp)
}

void create_table_resp::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_no_) -
      reinterpret_cast<char*>(&result_)) + sizeof(table_no_));
}

create_table_resp::~create_table_resp() {
  // @@protoc_insertion_point(destructor:game.create_table_resp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void create_table_resp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void create_table_resp::ArenaDtor(void* object) {
  create_table_resp* _this = reinterpret_cast< create_table_resp* >(object);
  (void)_this;
}
void create_table_resp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void create_table_resp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const create_table_resp& create_table_resp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_create_table_resp_game_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void create_table_resp::Clear() {
// @@protoc_insertion_point(message_clear_start:game.create_table_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_no_) -
      reinterpret_cast<char*>(&result_)) + sizeof(table_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* create_table_resp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 table_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          table_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* create_table_resp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.create_table_resp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // int32 table_no = 2;
  if (this->table_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_table_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.create_table_resp)
  return target;
}

size_t create_table_resp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.create_table_resp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  // int32 table_no = 2;
  if (this->table_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_table_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void create_table_resp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.create_table_resp)
  GOOGLE_DCHECK_NE(&from, this);
  const create_table_resp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<create_table_resp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.create_table_resp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.create_table_resp)
    MergeFrom(*source);
  }
}

void create_table_resp::MergeFrom(const create_table_resp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.create_table_resp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.table_no() != 0) {
    _internal_set_table_no(from._internal_table_no());
  }
}

void create_table_resp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.create_table_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_table_resp::CopyFrom(const create_table_resp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.create_table_resp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_table_resp::IsInitialized() const {
  return true;
}

void create_table_resp::InternalSwap(create_table_resp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(create_table_resp, table_no_)
      + sizeof(create_table_resp::table_no_)
      - PROTOBUF_FIELD_OFFSET(create_table_resp, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata create_table_resp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void table_seat_player::InitAsDefaultInstance() {
}
class table_seat_player::_Internal {
 public:
};

table_seat_player::table_seat_player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.table_seat_player)
}
table_seat_player::table_seat_player(const table_seat_player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logo().empty()) {
    logo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_logo(),
      GetArena());
  }
  ::memcpy(&seat_no_, &from.seat_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_all_in_) -
    reinterpret_cast<char*>(&seat_no_)) + sizeof(is_all_in_));
  // @@protoc_insertion_point(copy_constructor:game.table_seat_player)
}

void table_seat_player::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_table_seat_player_game_5fmsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&seat_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_all_in_) -
      reinterpret_cast<char*>(&seat_no_)) + sizeof(is_all_in_));
}

table_seat_player::~table_seat_player() {
  // @@protoc_insertion_point(destructor:game.table_seat_player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void table_seat_player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void table_seat_player::ArenaDtor(void* object) {
  table_seat_player* _this = reinterpret_cast< table_seat_player* >(object);
  (void)_this;
}
void table_seat_player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void table_seat_player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const table_seat_player& table_seat_player::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_table_seat_player_game_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void table_seat_player::Clear() {
// @@protoc_insertion_point(message_clear_start:game.table_seat_player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  logo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&seat_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_all_in_) -
      reinterpret_cast<char*>(&seat_no_)) + sizeof(is_all_in_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* table_seat_player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 seat_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seat_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.table_seat_player.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_cash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_cash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bat_cash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bat_cash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string logo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_logo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "game.table_seat_player.logo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_fall = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_fall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_all_in = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_all_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* table_seat_player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.table_seat_player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seat_no = 1;
  if (this->seat_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_seat_no(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.table_seat_player.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 total_cash = 3;
  if (this->total_cash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total_cash(), target);
  }

  // int32 bat_cash = 4;
  if (this->bat_cash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_bat_cash(), target);
  }

  // string logo = 5;
  if (this->logo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logo().data(), static_cast<int>(this->_internal_logo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.table_seat_player.logo");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_logo(), target);
  }

  // bool is_fall = 6;
  if (this->is_fall() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_fall(), target);
  }

  // bool is_all_in = 7;
  if (this->is_all_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_all_in(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.table_seat_player)
  return target;
}

size_t table_seat_player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.table_seat_player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string logo = 5;
  if (this->logo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logo());
  }

  // int32 seat_no = 1;
  if (this->seat_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seat_no());
  }

  // int32 total_cash = 3;
  if (this->total_cash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total_cash());
  }

  // int32 bat_cash = 4;
  if (this->bat_cash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bat_cash());
  }

  // bool is_fall = 6;
  if (this->is_fall() != 0) {
    total_size += 1 + 1;
  }

  // bool is_all_in = 7;
  if (this->is_all_in() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void table_seat_player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.table_seat_player)
  GOOGLE_DCHECK_NE(&from, this);
  const table_seat_player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<table_seat_player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.table_seat_player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.table_seat_player)
    MergeFrom(*source);
  }
}

void table_seat_player::MergeFrom(const table_seat_player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.table_seat_player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.logo().size() > 0) {
    _internal_set_logo(from._internal_logo());
  }
  if (from.seat_no() != 0) {
    _internal_set_seat_no(from._internal_seat_no());
  }
  if (from.total_cash() != 0) {
    _internal_set_total_cash(from._internal_total_cash());
  }
  if (from.bat_cash() != 0) {
    _internal_set_bat_cash(from._internal_bat_cash());
  }
  if (from.is_fall() != 0) {
    _internal_set_is_fall(from._internal_is_fall());
  }
  if (from.is_all_in() != 0) {
    _internal_set_is_all_in(from._internal_is_all_in());
  }
}

void table_seat_player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.table_seat_player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void table_seat_player::CopyFrom(const table_seat_player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.table_seat_player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool table_seat_player::IsInitialized() const {
  return true;
}

void table_seat_player::InternalSwap(table_seat_player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  logo_.Swap(&other->logo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(table_seat_player, is_all_in_)
      + sizeof(table_seat_player::is_all_in_)
      - PROTOBUF_FIELD_OFFSET(table_seat_player, seat_no_)>(
          reinterpret_cast<char*>(&seat_no_),
          reinterpret_cast<char*>(&other->seat_no_));
}

::PROTOBUF_NAMESPACE_ID::Metadata table_seat_player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void game_poker_card::InitAsDefaultInstance() {
}
class game_poker_card::_Internal {
 public:
};

game_poker_card::game_poker_card(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.game_poker_card)
}
game_poker_card::game_poker_card(const game_poker_card& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&color_)) + sizeof(number_));
  // @@protoc_insertion_point(copy_constructor:game.game_poker_card)
}

void game_poker_card::SharedCtor() {
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&color_)) + sizeof(number_));
}

game_poker_card::~game_poker_card() {
  // @@protoc_insertion_point(destructor:game.game_poker_card)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void game_poker_card::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void game_poker_card::ArenaDtor(void* object) {
  game_poker_card* _this = reinterpret_cast< game_poker_card* >(object);
  (void)_this;
}
void game_poker_card::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void game_poker_card::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const game_poker_card& game_poker_card::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_game_poker_card_game_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void game_poker_card::Clear() {
// @@protoc_insertion_point(message_clear_start:game.game_poker_card)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_) -
      reinterpret_cast<char*>(&color_)) + sizeof(number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* game_poker_card::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* game_poker_card::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.game_poker_card)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 color = 1;
  if (this->color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_color(), target);
  }

  // int32 number = 2;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.game_poker_card)
  return target;
}

size_t game_poker_card::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.game_poker_card)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 color = 1;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_color());
  }

  // int32 number = 2;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void game_poker_card::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.game_poker_card)
  GOOGLE_DCHECK_NE(&from, this);
  const game_poker_card* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<game_poker_card>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.game_poker_card)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.game_poker_card)
    MergeFrom(*source);
  }
}

void game_poker_card::MergeFrom(const game_poker_card& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.game_poker_card)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.color() != 0) {
    _internal_set_color(from._internal_color());
  }
  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
}

void game_poker_card::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.game_poker_card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_poker_card::CopyFrom(const game_poker_card& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.game_poker_card)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_poker_card::IsInitialized() const {
  return true;
}

void game_poker_card::InternalSwap(game_poker_card* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(game_poker_card, number_)
      + sizeof(game_poker_card::number_)
      - PROTOBUF_FIELD_OFFSET(game_poker_card, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata game_poker_card::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void table_info_sync::InitAsDefaultInstance() {
}
class table_info_sync::_Internal {
 public:
};

table_info_sync::table_info_sync(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena),
  table_cards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.table_info_sync)
}
table_info_sync::table_info_sync(const table_info_sync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_),
      table_cards_(from.table_cards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&table_no_, &from.table_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_bat_) -
    reinterpret_cast<char*>(&table_no_)) + sizeof(min_bat_));
  // @@protoc_insertion_point(copy_constructor:game.table_info_sync)
}

void table_info_sync::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_table_info_sync_game_5fmsg_2eproto.base);
  ::memset(&table_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_bat_) -
      reinterpret_cast<char*>(&table_no_)) + sizeof(min_bat_));
}

table_info_sync::~table_info_sync() {
  // @@protoc_insertion_point(destructor:game.table_info_sync)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void table_info_sync::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void table_info_sync::ArenaDtor(void* object) {
  table_info_sync* _this = reinterpret_cast< table_info_sync* >(object);
  (void)_this;
}
void table_info_sync::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void table_info_sync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const table_info_sync& table_info_sync::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_table_info_sync_game_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void table_info_sync::Clear() {
// @@protoc_insertion_point(message_clear_start:game.table_info_sync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  table_cards_.Clear();
  ::memset(&table_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_bat_) -
      reinterpret_cast<char*>(&table_no_)) + sizeof(min_bat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* table_info_sync::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 table_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          table_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .game.table_seat_player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 dealer_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dealer_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 action_pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          action_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_bat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          min_bat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .game.game_poker_card table_cards = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table_cards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* table_info_sync::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.table_info_sync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 table_no = 1;
  if (this->table_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_table_no(), target);
  }

  // repeated .game.table_seat_player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_players(i), target, stream);
  }

  // int32 dealer_pos = 3;
  if (this->dealer_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dealer_pos(), target);
  }

  // int32 action_pos = 4;
  if (this->action_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_action_pos(), target);
  }

  // int32 min_bat = 5;
  if (this->min_bat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_min_bat(), target);
  }

  // repeated .game.game_poker_card table_cards = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_table_cards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_table_cards(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.table_info_sync)
  return target;
}

size_t table_info_sync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.table_info_sync)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.table_seat_player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .game.game_poker_card table_cards = 6;
  total_size += 1UL * this->_internal_table_cards_size();
  for (const auto& msg : this->table_cards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 table_no = 1;
  if (this->table_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_table_no());
  }

  // int32 dealer_pos = 3;
  if (this->dealer_pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dealer_pos());
  }

  // int32 action_pos = 4;
  if (this->action_pos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_pos());
  }

  // int32 min_bat = 5;
  if (this->min_bat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_bat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void table_info_sync::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.table_info_sync)
  GOOGLE_DCHECK_NE(&from, this);
  const table_info_sync* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<table_info_sync>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.table_info_sync)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.table_info_sync)
    MergeFrom(*source);
  }
}

void table_info_sync::MergeFrom(const table_info_sync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.table_info_sync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  table_cards_.MergeFrom(from.table_cards_);
  if (from.table_no() != 0) {
    _internal_set_table_no(from._internal_table_no());
  }
  if (from.dealer_pos() != 0) {
    _internal_set_dealer_pos(from._internal_dealer_pos());
  }
  if (from.action_pos() != 0) {
    _internal_set_action_pos(from._internal_action_pos());
  }
  if (from.min_bat() != 0) {
    _internal_set_min_bat(from._internal_min_bat());
  }
}

void table_info_sync::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.table_info_sync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void table_info_sync::CopyFrom(const table_info_sync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.table_info_sync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool table_info_sync::IsInitialized() const {
  return true;
}

void table_info_sync::InternalSwap(table_info_sync* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
  table_cards_.InternalSwap(&other->table_cards_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(table_info_sync, min_bat_)
      + sizeof(table_info_sync::min_bat_)
      - PROTOBUF_FIELD_OFFSET(table_info_sync, table_no_)>(
          reinterpret_cast<char*>(&table_no_),
          reinterpret_cast<char*>(&other->table_no_));
}

::PROTOBUF_NAMESPACE_ID::Metadata table_info_sync::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void player_sit_down_req::InitAsDefaultInstance() {
}
class player_sit_down_req::_Internal {
 public:
};

player_sit_down_req::player_sit_down_req(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.player_sit_down_req)
}
player_sit_down_req::player_sit_down_req(const player_sit_down_req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seat_no_, &from.seat_no_,
    static_cast<size_t>(reinterpret_cast<char*>(&carry_cash_) -
    reinterpret_cast<char*>(&seat_no_)) + sizeof(carry_cash_));
  // @@protoc_insertion_point(copy_constructor:game.player_sit_down_req)
}

void player_sit_down_req::SharedCtor() {
  ::memset(&seat_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&carry_cash_) -
      reinterpret_cast<char*>(&seat_no_)) + sizeof(carry_cash_));
}

player_sit_down_req::~player_sit_down_req() {
  // @@protoc_insertion_point(destructor:game.player_sit_down_req)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void player_sit_down_req::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void player_sit_down_req::ArenaDtor(void* object) {
  player_sit_down_req* _this = reinterpret_cast< player_sit_down_req* >(object);
  (void)_this;
}
void player_sit_down_req::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void player_sit_down_req::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const player_sit_down_req& player_sit_down_req::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_player_sit_down_req_game_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void player_sit_down_req::Clear() {
// @@protoc_insertion_point(message_clear_start:game.player_sit_down_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seat_no_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&carry_cash_) -
      reinterpret_cast<char*>(&seat_no_)) + sizeof(carry_cash_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* player_sit_down_req::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 seat_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seat_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 carry_cash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          carry_cash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* player_sit_down_req::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.player_sit_down_req)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seat_no = 1;
  if (this->seat_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_seat_no(), target);
  }

  // int32 carry_cash = 2;
  if (this->carry_cash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_carry_cash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.player_sit_down_req)
  return target;
}

size_t player_sit_down_req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.player_sit_down_req)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 seat_no = 1;
  if (this->seat_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seat_no());
  }

  // int32 carry_cash = 2;
  if (this->carry_cash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_carry_cash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void player_sit_down_req::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.player_sit_down_req)
  GOOGLE_DCHECK_NE(&from, this);
  const player_sit_down_req* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<player_sit_down_req>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.player_sit_down_req)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.player_sit_down_req)
    MergeFrom(*source);
  }
}

void player_sit_down_req::MergeFrom(const player_sit_down_req& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.player_sit_down_req)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seat_no() != 0) {
    _internal_set_seat_no(from._internal_seat_no());
  }
  if (from.carry_cash() != 0) {
    _internal_set_carry_cash(from._internal_carry_cash());
  }
}

void player_sit_down_req::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.player_sit_down_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_sit_down_req::CopyFrom(const player_sit_down_req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.player_sit_down_req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_sit_down_req::IsInitialized() const {
  return true;
}

void player_sit_down_req::InternalSwap(player_sit_down_req* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(player_sit_down_req, carry_cash_)
      + sizeof(player_sit_down_req::carry_cash_)
      - PROTOBUF_FIELD_OFFSET(player_sit_down_req, seat_no_)>(
          reinterpret_cast<char*>(&seat_no_),
          reinterpret_cast<char*>(&other->seat_no_));
}

::PROTOBUF_NAMESPACE_ID::Metadata player_sit_down_req::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void player_self_info::InitAsDefaultInstance() {
}
class player_self_info::_Internal {
 public:
};

player_self_info::player_self_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.player_self_info)
}
player_self_info::player_self_info(const player_self_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seat_no_ = from.seat_no_;
  // @@protoc_insertion_point(copy_constructor:game.player_self_info)
}

void player_self_info::SharedCtor() {
  seat_no_ = 0;
}

player_self_info::~player_self_info() {
  // @@protoc_insertion_point(destructor:game.player_self_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void player_self_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void player_self_info::ArenaDtor(void* object) {
  player_self_info* _this = reinterpret_cast< player_self_info* >(object);
  (void)_this;
}
void player_self_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void player_self_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const player_self_info& player_self_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_player_self_info_game_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void player_self_info::Clear() {
// @@protoc_insertion_point(message_clear_start:game.player_self_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seat_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* player_self_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 seat_no = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seat_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* player_self_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.player_self_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 seat_no = 1;
  if (this->seat_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_seat_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.player_self_info)
  return target;
}

size_t player_self_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.player_self_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 seat_no = 1;
  if (this->seat_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seat_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void player_self_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.player_self_info)
  GOOGLE_DCHECK_NE(&from, this);
  const player_self_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<player_self_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.player_self_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.player_self_info)
    MergeFrom(*source);
  }
}

void player_self_info::MergeFrom(const player_self_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.player_self_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seat_no() != 0) {
    _internal_set_seat_no(from._internal_seat_no());
  }
}

void player_self_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.player_self_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_self_info::CopyFrom(const player_self_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.player_self_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_self_info::IsInitialized() const {
  return true;
}

void player_self_info::InternalSwap(player_self_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(seat_no_, other->seat_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata player_self_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void player_hand_card_info::InitAsDefaultInstance() {
  ::game::_player_hand_card_info_default_instance_._instance.get_mutable()->first_ = const_cast< ::game::game_poker_card*>(
      ::game::game_poker_card::internal_default_instance());
  ::game::_player_hand_card_info_default_instance_._instance.get_mutable()->second_ = const_cast< ::game::game_poker_card*>(
      ::game::game_poker_card::internal_default_instance());
}
class player_hand_card_info::_Internal {
 public:
  static const ::game::game_poker_card& first(const player_hand_card_info* msg);
  static const ::game::game_poker_card& second(const player_hand_card_info* msg);
};

const ::game::game_poker_card&
player_hand_card_info::_Internal::first(const player_hand_card_info* msg) {
  return *msg->first_;
}
const ::game::game_poker_card&
player_hand_card_info::_Internal::second(const player_hand_card_info* msg) {
  return *msg->second_;
}
player_hand_card_info::player_hand_card_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.player_hand_card_info)
}
player_hand_card_info::player_hand_card_info(const player_hand_card_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_first()) {
    first_ = new ::game::game_poker_card(*from.first_);
  } else {
    first_ = nullptr;
  }
  if (from._internal_has_second()) {
    second_ = new ::game::game_poker_card(*from.second_);
  } else {
    second_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:game.player_hand_card_info)
}

void player_hand_card_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_player_hand_card_info_game_5fmsg_2eproto.base);
  ::memset(&first_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&second_) -
      reinterpret_cast<char*>(&first_)) + sizeof(second_));
}

player_hand_card_info::~player_hand_card_info() {
  // @@protoc_insertion_point(destructor:game.player_hand_card_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void player_hand_card_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete first_;
  if (this != internal_default_instance()) delete second_;
}

void player_hand_card_info::ArenaDtor(void* object) {
  player_hand_card_info* _this = reinterpret_cast< player_hand_card_info* >(object);
  (void)_this;
}
void player_hand_card_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void player_hand_card_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const player_hand_card_info& player_hand_card_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_player_hand_card_info_game_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void player_hand_card_info::Clear() {
// @@protoc_insertion_point(message_clear_start:game.player_hand_card_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && first_ != nullptr) {
    delete first_;
  }
  first_ = nullptr;
  if (GetArena() == nullptr && second_ != nullptr) {
    delete second_;
  }
  second_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* player_hand_card_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .game.game_poker_card first = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_first(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .game.game_poker_card second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_second(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* player_hand_card_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.player_hand_card_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.game_poker_card first = 1;
  if (this->has_first()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::first(this), target, stream);
  }

  // .game.game_poker_card second = 2;
  if (this->has_second()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::second(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.player_hand_card_info)
  return target;
}

size_t player_hand_card_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.player_hand_card_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.game_poker_card first = 1;
  if (this->has_first()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *first_);
  }

  // .game.game_poker_card second = 2;
  if (this->has_second()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *second_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void player_hand_card_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.player_hand_card_info)
  GOOGLE_DCHECK_NE(&from, this);
  const player_hand_card_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<player_hand_card_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.player_hand_card_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.player_hand_card_info)
    MergeFrom(*source);
  }
}

void player_hand_card_info::MergeFrom(const player_hand_card_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.player_hand_card_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_first()) {
    _internal_mutable_first()->::game::game_poker_card::MergeFrom(from._internal_first());
  }
  if (from.has_second()) {
    _internal_mutable_second()->::game::game_poker_card::MergeFrom(from._internal_second());
  }
}

void player_hand_card_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.player_hand_card_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_hand_card_info::CopyFrom(const player_hand_card_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.player_hand_card_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_hand_card_info::IsInitialized() const {
  return true;
}

void player_hand_card_info::InternalSwap(player_hand_card_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(player_hand_card_info, second_)
      + sizeof(player_hand_card_info::second_)
      - PROTOBUF_FIELD_OFFSET(player_hand_card_info, first_)>(
          reinterpret_cast<char*>(&first_),
          reinterpret_cast<char*>(&other->first_));
}

::PROTOBUF_NAMESPACE_ID::Metadata player_hand_card_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void player_action::InitAsDefaultInstance() {
}
class player_action::_Internal {
 public:
};

player_action::player_action(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:game.player_action)
}
player_action::player_action(const player_action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&action_, &from.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&cash_) -
    reinterpret_cast<char*>(&action_)) + sizeof(cash_));
  // @@protoc_insertion_point(copy_constructor:game.player_action)
}

void player_action::SharedCtor() {
  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cash_) -
      reinterpret_cast<char*>(&action_)) + sizeof(cash_));
}

player_action::~player_action() {
  // @@protoc_insertion_point(destructor:game.player_action)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void player_action::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void player_action::ArenaDtor(void* object) {
  player_action* _this = reinterpret_cast< player_action* >(object);
  (void)_this;
}
void player_action::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void player_action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const player_action& player_action::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_player_action_game_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void player_action::Clear() {
// @@protoc_insertion_point(message_clear_start:game.player_action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cash_) -
      reinterpret_cast<char*>(&action_)) + sizeof(cash_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* player_action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* player_action::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.player_action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 action = 1;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_action(), target);
  }

  // int32 cash = 2;
  if (this->cash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.player_action)
  return target;
}

size_t player_action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.player_action)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action());
  }

  // int32 cash = 2;
  if (this->cash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void player_action::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.player_action)
  GOOGLE_DCHECK_NE(&from, this);
  const player_action* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<player_action>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.player_action)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.player_action)
    MergeFrom(*source);
  }
}

void player_action::MergeFrom(const player_action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.player_action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
  if (from.cash() != 0) {
    _internal_set_cash(from._internal_cash());
  }
}

void player_action::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.player_action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_action::CopyFrom(const player_action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.player_action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_action::IsInitialized() const {
  return true;
}

void player_action::InternalSwap(player_action* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(player_action, cash_)
      + sizeof(player_action::cash_)
      - PROTOBUF_FIELD_OFFSET(player_action, action_)>(
          reinterpret_cast<char*>(&action_),
          reinterpret_cast<char*>(&other->action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata player_action::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::sync_session* Arena::CreateMaybeMessage< ::game::sync_session >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::sync_session >(arena);
}
template<> PROTOBUF_NOINLINE ::game::game_mng_result* Arena::CreateMaybeMessage< ::game::game_mng_result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::game_mng_result >(arena);
}
template<> PROTOBUF_NOINLINE ::game::user_login* Arena::CreateMaybeMessage< ::game::user_login >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::user_login >(arena);
}
template<> PROTOBUF_NOINLINE ::game::user_qq_login* Arena::CreateMaybeMessage< ::game::user_qq_login >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::user_qq_login >(arena);
}
template<> PROTOBUF_NOINLINE ::game::user_login_resp* Arena::CreateMaybeMessage< ::game::user_login_resp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::user_login_resp >(arena);
}
template<> PROTOBUF_NOINLINE ::game::user_info_resp* Arena::CreateMaybeMessage< ::game::user_info_resp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::user_info_resp >(arena);
}
template<> PROTOBUF_NOINLINE ::game::add_cash_req* Arena::CreateMaybeMessage< ::game::add_cash_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::add_cash_req >(arena);
}
template<> PROTOBUF_NOINLINE ::game::create_table_resp* Arena::CreateMaybeMessage< ::game::create_table_resp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::create_table_resp >(arena);
}
template<> PROTOBUF_NOINLINE ::game::table_seat_player* Arena::CreateMaybeMessage< ::game::table_seat_player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::table_seat_player >(arena);
}
template<> PROTOBUF_NOINLINE ::game::game_poker_card* Arena::CreateMaybeMessage< ::game::game_poker_card >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::game_poker_card >(arena);
}
template<> PROTOBUF_NOINLINE ::game::table_info_sync* Arena::CreateMaybeMessage< ::game::table_info_sync >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::table_info_sync >(arena);
}
template<> PROTOBUF_NOINLINE ::game::player_sit_down_req* Arena::CreateMaybeMessage< ::game::player_sit_down_req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::player_sit_down_req >(arena);
}
template<> PROTOBUF_NOINLINE ::game::player_self_info* Arena::CreateMaybeMessage< ::game::player_self_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::player_self_info >(arena);
}
template<> PROTOBUF_NOINLINE ::game::player_hand_card_info* Arena::CreateMaybeMessage< ::game::player_hand_card_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::player_hand_card_info >(arena);
}
template<> PROTOBUF_NOINLINE ::game::player_action* Arena::CreateMaybeMessage< ::game::player_action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::player_action >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
