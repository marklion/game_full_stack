// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fmsg_2eproto;
namespace game {
class add_cash_req;
class add_cash_reqDefaultTypeInternal;
extern add_cash_reqDefaultTypeInternal _add_cash_req_default_instance_;
class create_table_resp;
class create_table_respDefaultTypeInternal;
extern create_table_respDefaultTypeInternal _create_table_resp_default_instance_;
class game_mng_result;
class game_mng_resultDefaultTypeInternal;
extern game_mng_resultDefaultTypeInternal _game_mng_result_default_instance_;
class game_poker_card;
class game_poker_cardDefaultTypeInternal;
extern game_poker_cardDefaultTypeInternal _game_poker_card_default_instance_;
class player_action;
class player_actionDefaultTypeInternal;
extern player_actionDefaultTypeInternal _player_action_default_instance_;
class player_hand_card_info;
class player_hand_card_infoDefaultTypeInternal;
extern player_hand_card_infoDefaultTypeInternal _player_hand_card_info_default_instance_;
class player_self_info;
class player_self_infoDefaultTypeInternal;
extern player_self_infoDefaultTypeInternal _player_self_info_default_instance_;
class player_sit_down_req;
class player_sit_down_reqDefaultTypeInternal;
extern player_sit_down_reqDefaultTypeInternal _player_sit_down_req_default_instance_;
class sync_session;
class sync_sessionDefaultTypeInternal;
extern sync_sessionDefaultTypeInternal _sync_session_default_instance_;
class table_info_sync;
class table_info_syncDefaultTypeInternal;
extern table_info_syncDefaultTypeInternal _table_info_sync_default_instance_;
class table_seat_player;
class table_seat_playerDefaultTypeInternal;
extern table_seat_playerDefaultTypeInternal _table_seat_player_default_instance_;
class user_info_resp;
class user_info_respDefaultTypeInternal;
extern user_info_respDefaultTypeInternal _user_info_resp_default_instance_;
class user_login;
class user_loginDefaultTypeInternal;
extern user_loginDefaultTypeInternal _user_login_default_instance_;
class user_login_resp;
class user_login_respDefaultTypeInternal;
extern user_login_respDefaultTypeInternal _user_login_resp_default_instance_;
class user_qq_login;
class user_qq_loginDefaultTypeInternal;
extern user_qq_loginDefaultTypeInternal _user_qq_login_default_instance_;
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::add_cash_req* Arena::CreateMaybeMessage<::game::add_cash_req>(Arena*);
template<> ::game::create_table_resp* Arena::CreateMaybeMessage<::game::create_table_resp>(Arena*);
template<> ::game::game_mng_result* Arena::CreateMaybeMessage<::game::game_mng_result>(Arena*);
template<> ::game::game_poker_card* Arena::CreateMaybeMessage<::game::game_poker_card>(Arena*);
template<> ::game::player_action* Arena::CreateMaybeMessage<::game::player_action>(Arena*);
template<> ::game::player_hand_card_info* Arena::CreateMaybeMessage<::game::player_hand_card_info>(Arena*);
template<> ::game::player_self_info* Arena::CreateMaybeMessage<::game::player_self_info>(Arena*);
template<> ::game::player_sit_down_req* Arena::CreateMaybeMessage<::game::player_sit_down_req>(Arena*);
template<> ::game::sync_session* Arena::CreateMaybeMessage<::game::sync_session>(Arena*);
template<> ::game::table_info_sync* Arena::CreateMaybeMessage<::game::table_info_sync>(Arena*);
template<> ::game::table_seat_player* Arena::CreateMaybeMessage<::game::table_seat_player>(Arena*);
template<> ::game::user_info_resp* Arena::CreateMaybeMessage<::game::user_info_resp>(Arena*);
template<> ::game::user_login* Arena::CreateMaybeMessage<::game::user_login>(Arena*);
template<> ::game::user_login_resp* Arena::CreateMaybeMessage<::game::user_login_resp>(Arena*);
template<> ::game::user_qq_login* Arena::CreateMaybeMessage<::game::user_qq_login>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {

// ===================================================================

class sync_session PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.sync_session) */ {
 public:
  inline sync_session() : sync_session(nullptr) {}
  virtual ~sync_session();

  sync_session(const sync_session& from);
  sync_session(sync_session&& from) noexcept
    : sync_session() {
    *this = ::std::move(from);
  }

  inline sync_session& operator=(const sync_session& from) {
    CopyFrom(from);
    return *this;
  }
  inline sync_session& operator=(sync_session&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const sync_session& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sync_session* internal_default_instance() {
    return reinterpret_cast<const sync_session*>(
               &_sync_session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(sync_session& a, sync_session& b) {
    a.Swap(&b);
  }
  inline void Swap(sync_session* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sync_session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sync_session* New() const final {
    return CreateMaybeMessage<sync_session>(nullptr);
  }

  sync_session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sync_session>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const sync_session& from);
  void MergeFrom(const sync_session& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sync_session* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.sync_session";
  }
  protected:
  explicit sync_session(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fmsg_2eproto);
    return ::descriptor_table_game_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
    kTableNoFieldNumber = 2,
  };
  // string session = 1;
  void clear_session();
  const std::string& session() const;
  void set_session(const std::string& value);
  void set_session(std::string&& value);
  void set_session(const char* value);
  void set_session(const char* value, size_t size);
  std::string* mutable_session();
  std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // int32 table_no = 2;
  void clear_table_no();
  ::PROTOBUF_NAMESPACE_ID::int32 table_no() const;
  void set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_no() const;
  void _internal_set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.sync_session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class game_mng_result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.game_mng_result) */ {
 public:
  inline game_mng_result() : game_mng_result(nullptr) {}
  virtual ~game_mng_result();

  game_mng_result(const game_mng_result& from);
  game_mng_result(game_mng_result&& from) noexcept
    : game_mng_result() {
    *this = ::std::move(from);
  }

  inline game_mng_result& operator=(const game_mng_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline game_mng_result& operator=(game_mng_result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const game_mng_result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const game_mng_result* internal_default_instance() {
    return reinterpret_cast<const game_mng_result*>(
               &_game_mng_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(game_mng_result& a, game_mng_result& b) {
    a.Swap(&b);
  }
  inline void Swap(game_mng_result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(game_mng_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline game_mng_result* New() const final {
    return CreateMaybeMessage<game_mng_result>(nullptr);
  }

  game_mng_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<game_mng_result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const game_mng_result& from);
  void MergeFrom(const game_mng_result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(game_mng_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.game_mng_result";
  }
  protected:
  explicit game_mng_result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fmsg_2eproto);
    return ::descriptor_table_game_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.game_mng_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class user_login PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.user_login) */ {
 public:
  inline user_login() : user_login(nullptr) {}
  virtual ~user_login();

  user_login(const user_login& from);
  user_login(user_login&& from) noexcept
    : user_login() {
    *this = ::std::move(from);
  }

  inline user_login& operator=(const user_login& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_login& operator=(user_login&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user_login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user_login* internal_default_instance() {
    return reinterpret_cast<const user_login*>(
               &_user_login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(user_login& a, user_login& b) {
    a.Swap(&b);
  }
  inline void Swap(user_login* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_login* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_login* New() const final {
    return CreateMaybeMessage<user_login>(nullptr);
  }

  user_login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_login>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user_login& from);
  void MergeFrom(const user_login& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_login* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.user_login";
  }
  protected:
  explicit user_login(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fmsg_2eproto);
    return ::descriptor_table_game_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // @@protoc_insertion_point(class_scope:game.user_login)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class user_qq_login PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.user_qq_login) */ {
 public:
  inline user_qq_login() : user_qq_login(nullptr) {}
  virtual ~user_qq_login();

  user_qq_login(const user_qq_login& from);
  user_qq_login(user_qq_login&& from) noexcept
    : user_qq_login() {
    *this = ::std::move(from);
  }

  inline user_qq_login& operator=(const user_qq_login& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_qq_login& operator=(user_qq_login&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user_qq_login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user_qq_login* internal_default_instance() {
    return reinterpret_cast<const user_qq_login*>(
               &_user_qq_login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(user_qq_login& a, user_qq_login& b) {
    a.Swap(&b);
  }
  inline void Swap(user_qq_login* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_qq_login* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_qq_login* New() const final {
    return CreateMaybeMessage<user_qq_login>(nullptr);
  }

  user_qq_login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_qq_login>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user_qq_login& from);
  void MergeFrom(const user_qq_login& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_qq_login* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.user_qq_login";
  }
  protected:
  explicit user_qq_login(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fmsg_2eproto);
    return ::descriptor_table_game_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenidFieldNumber = 1,
    kAcctokFieldNumber = 2,
  };
  // string openid = 1;
  void clear_openid();
  const std::string& openid() const;
  void set_openid(const std::string& value);
  void set_openid(std::string&& value);
  void set_openid(const char* value);
  void set_openid(const char* value, size_t size);
  std::string* mutable_openid();
  std::string* release_openid();
  void set_allocated_openid(std::string* openid);
  private:
  const std::string& _internal_openid() const;
  void _internal_set_openid(const std::string& value);
  std::string* _internal_mutable_openid();
  public:

  // string acctok = 2;
  void clear_acctok();
  const std::string& acctok() const;
  void set_acctok(const std::string& value);
  void set_acctok(std::string&& value);
  void set_acctok(const char* value);
  void set_acctok(const char* value, size_t size);
  std::string* mutable_acctok();
  std::string* release_acctok();
  void set_allocated_acctok(std::string* acctok);
  private:
  const std::string& _internal_acctok() const;
  void _internal_set_acctok(const std::string& value);
  std::string* _internal_mutable_acctok();
  public:

  // @@protoc_insertion_point(class_scope:game.user_qq_login)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr openid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acctok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class user_login_resp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.user_login_resp) */ {
 public:
  inline user_login_resp() : user_login_resp(nullptr) {}
  virtual ~user_login_resp();

  user_login_resp(const user_login_resp& from);
  user_login_resp(user_login_resp&& from) noexcept
    : user_login_resp() {
    *this = ::std::move(from);
  }

  inline user_login_resp& operator=(const user_login_resp& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_login_resp& operator=(user_login_resp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user_login_resp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user_login_resp* internal_default_instance() {
    return reinterpret_cast<const user_login_resp*>(
               &_user_login_resp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(user_login_resp& a, user_login_resp& b) {
    a.Swap(&b);
  }
  inline void Swap(user_login_resp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_login_resp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_login_resp* New() const final {
    return CreateMaybeMessage<user_login_resp>(nullptr);
  }

  user_login_resp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_login_resp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user_login_resp& from);
  void MergeFrom(const user_login_resp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_login_resp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.user_login_resp";
  }
  protected:
  explicit user_login_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fmsg_2eproto);
    return ::descriptor_table_game_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string session = 2;
  void clear_session();
  const std::string& session() const;
  void set_session(const std::string& value);
  void set_session(std::string&& value);
  void set_session(const char* value);
  void set_session(const char* value, size_t size);
  std::string* mutable_session();
  std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.user_login_resp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class user_info_resp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.user_info_resp) */ {
 public:
  inline user_info_resp() : user_info_resp(nullptr) {}
  virtual ~user_info_resp();

  user_info_resp(const user_info_resp& from);
  user_info_resp(user_info_resp&& from) noexcept
    : user_info_resp() {
    *this = ::std::move(from);
  }

  inline user_info_resp& operator=(const user_info_resp& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_info_resp& operator=(user_info_resp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user_info_resp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user_info_resp* internal_default_instance() {
    return reinterpret_cast<const user_info_resp*>(
               &_user_info_resp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(user_info_resp& a, user_info_resp& b) {
    a.Swap(&b);
  }
  inline void Swap(user_info_resp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_info_resp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_info_resp* New() const final {
    return CreateMaybeMessage<user_info_resp>(nullptr);
  }

  user_info_resp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_info_resp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user_info_resp& from);
  void MergeFrom(const user_info_resp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_info_resp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.user_info_resp";
  }
  protected:
  explicit user_info_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fmsg_2eproto);
    return ::descriptor_table_game_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kUserLogoFieldNumber = 2,
    kUserCashFieldNumber = 3,
    kTableNoFieldNumber = 4,
    kSeatNoFieldNumber = 5,
  };
  // string user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string user_logo = 2;
  void clear_user_logo();
  const std::string& user_logo() const;
  void set_user_logo(const std::string& value);
  void set_user_logo(std::string&& value);
  void set_user_logo(const char* value);
  void set_user_logo(const char* value, size_t size);
  std::string* mutable_user_logo();
  std::string* release_user_logo();
  void set_allocated_user_logo(std::string* user_logo);
  private:
  const std::string& _internal_user_logo() const;
  void _internal_set_user_logo(const std::string& value);
  std::string* _internal_mutable_user_logo();
  public:

  // int32 user_cash = 3;
  void clear_user_cash();
  ::PROTOBUF_NAMESPACE_ID::int32 user_cash() const;
  void set_user_cash(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_cash() const;
  void _internal_set_user_cash(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 table_no = 4;
  void clear_table_no();
  ::PROTOBUF_NAMESPACE_ID::int32 table_no() const;
  void set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_no() const;
  void _internal_set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 seat_no = 5;
  void clear_seat_no();
  ::PROTOBUF_NAMESPACE_ID::int32 seat_no() const;
  void set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seat_no() const;
  void _internal_set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.user_info_resp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_logo_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_cash_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 seat_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class add_cash_req PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.add_cash_req) */ {
 public:
  inline add_cash_req() : add_cash_req(nullptr) {}
  virtual ~add_cash_req();

  add_cash_req(const add_cash_req& from);
  add_cash_req(add_cash_req&& from) noexcept
    : add_cash_req() {
    *this = ::std::move(from);
  }

  inline add_cash_req& operator=(const add_cash_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline add_cash_req& operator=(add_cash_req&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const add_cash_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const add_cash_req* internal_default_instance() {
    return reinterpret_cast<const add_cash_req*>(
               &_add_cash_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(add_cash_req& a, add_cash_req& b) {
    a.Swap(&b);
  }
  inline void Swap(add_cash_req* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(add_cash_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline add_cash_req* New() const final {
    return CreateMaybeMessage<add_cash_req>(nullptr);
  }

  add_cash_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<add_cash_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const add_cash_req& from);
  void MergeFrom(const add_cash_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(add_cash_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.add_cash_req";
  }
  protected:
  explicit add_cash_req(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fmsg_2eproto);
    return ::descriptor_table_game_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsidFieldNumber = 1,
    kCashFieldNumber = 2,
  };
  // string ssid = 1;
  void clear_ssid();
  const std::string& ssid() const;
  void set_ssid(const std::string& value);
  void set_ssid(std::string&& value);
  void set_ssid(const char* value);
  void set_ssid(const char* value, size_t size);
  std::string* mutable_ssid();
  std::string* release_ssid();
  void set_allocated_ssid(std::string* ssid);
  private:
  const std::string& _internal_ssid() const;
  void _internal_set_ssid(const std::string& value);
  std::string* _internal_mutable_ssid();
  public:

  // int32 cash = 2;
  void clear_cash();
  ::PROTOBUF_NAMESPACE_ID::int32 cash() const;
  void set_cash(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cash() const;
  void _internal_set_cash(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.add_cash_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssid_;
  ::PROTOBUF_NAMESPACE_ID::int32 cash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class create_table_resp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.create_table_resp) */ {
 public:
  inline create_table_resp() : create_table_resp(nullptr) {}
  virtual ~create_table_resp();

  create_table_resp(const create_table_resp& from);
  create_table_resp(create_table_resp&& from) noexcept
    : create_table_resp() {
    *this = ::std::move(from);
  }

  inline create_table_resp& operator=(const create_table_resp& from) {
    CopyFrom(from);
    return *this;
  }
  inline create_table_resp& operator=(create_table_resp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const create_table_resp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const create_table_resp* internal_default_instance() {
    return reinterpret_cast<const create_table_resp*>(
               &_create_table_resp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(create_table_resp& a, create_table_resp& b) {
    a.Swap(&b);
  }
  inline void Swap(create_table_resp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(create_table_resp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline create_table_resp* New() const final {
    return CreateMaybeMessage<create_table_resp>(nullptr);
  }

  create_table_resp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<create_table_resp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const create_table_resp& from);
  void MergeFrom(const create_table_resp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(create_table_resp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.create_table_resp";
  }
  protected:
  explicit create_table_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fmsg_2eproto);
    return ::descriptor_table_game_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kTableNoFieldNumber = 2,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // int32 table_no = 2;
  void clear_table_no();
  ::PROTOBUF_NAMESPACE_ID::int32 table_no() const;
  void set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_no() const;
  void _internal_set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.create_table_resp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class table_seat_player PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.table_seat_player) */ {
 public:
  inline table_seat_player() : table_seat_player(nullptr) {}
  virtual ~table_seat_player();

  table_seat_player(const table_seat_player& from);
  table_seat_player(table_seat_player&& from) noexcept
    : table_seat_player() {
    *this = ::std::move(from);
  }

  inline table_seat_player& operator=(const table_seat_player& from) {
    CopyFrom(from);
    return *this;
  }
  inline table_seat_player& operator=(table_seat_player&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const table_seat_player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const table_seat_player* internal_default_instance() {
    return reinterpret_cast<const table_seat_player*>(
               &_table_seat_player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(table_seat_player& a, table_seat_player& b) {
    a.Swap(&b);
  }
  inline void Swap(table_seat_player* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(table_seat_player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline table_seat_player* New() const final {
    return CreateMaybeMessage<table_seat_player>(nullptr);
  }

  table_seat_player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<table_seat_player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const table_seat_player& from);
  void MergeFrom(const table_seat_player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(table_seat_player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.table_seat_player";
  }
  protected:
  explicit table_seat_player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fmsg_2eproto);
    return ::descriptor_table_game_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kLogoFieldNumber = 5,
    kSeatNoFieldNumber = 1,
    kTotalCashFieldNumber = 3,
    kBatCashFieldNumber = 4,
    kIsFallFieldNumber = 6,
    kIsAllInFieldNumber = 7,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string logo = 5;
  void clear_logo();
  const std::string& logo() const;
  void set_logo(const std::string& value);
  void set_logo(std::string&& value);
  void set_logo(const char* value);
  void set_logo(const char* value, size_t size);
  std::string* mutable_logo();
  std::string* release_logo();
  void set_allocated_logo(std::string* logo);
  private:
  const std::string& _internal_logo() const;
  void _internal_set_logo(const std::string& value);
  std::string* _internal_mutable_logo();
  public:

  // int32 seat_no = 1;
  void clear_seat_no();
  ::PROTOBUF_NAMESPACE_ID::int32 seat_no() const;
  void set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seat_no() const;
  void _internal_set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_cash = 3;
  void clear_total_cash();
  ::PROTOBUF_NAMESPACE_ID::int32 total_cash() const;
  void set_total_cash(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_cash() const;
  void _internal_set_total_cash(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bat_cash = 4;
  void clear_bat_cash();
  ::PROTOBUF_NAMESPACE_ID::int32 bat_cash() const;
  void set_bat_cash(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bat_cash() const;
  void _internal_set_bat_cash(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_fall = 6;
  void clear_is_fall();
  bool is_fall() const;
  void set_is_fall(bool value);
  private:
  bool _internal_is_fall() const;
  void _internal_set_is_fall(bool value);
  public:

  // bool is_all_in = 7;
  void clear_is_all_in();
  bool is_all_in() const;
  void set_is_all_in(bool value);
  private:
  bool _internal_is_all_in() const;
  void _internal_set_is_all_in(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.table_seat_player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logo_;
  ::PROTOBUF_NAMESPACE_ID::int32 seat_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_cash_;
  ::PROTOBUF_NAMESPACE_ID::int32 bat_cash_;
  bool is_fall_;
  bool is_all_in_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class table_info_sync PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.table_info_sync) */ {
 public:
  inline table_info_sync() : table_info_sync(nullptr) {}
  virtual ~table_info_sync();

  table_info_sync(const table_info_sync& from);
  table_info_sync(table_info_sync&& from) noexcept
    : table_info_sync() {
    *this = ::std::move(from);
  }

  inline table_info_sync& operator=(const table_info_sync& from) {
    CopyFrom(from);
    return *this;
  }
  inline table_info_sync& operator=(table_info_sync&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const table_info_sync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const table_info_sync* internal_default_instance() {
    return reinterpret_cast<const table_info_sync*>(
               &_table_info_sync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(table_info_sync& a, table_info_sync& b) {
    a.Swap(&b);
  }
  inline void Swap(table_info_sync* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(table_info_sync* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline table_info_sync* New() const final {
    return CreateMaybeMessage<table_info_sync>(nullptr);
  }

  table_info_sync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<table_info_sync>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const table_info_sync& from);
  void MergeFrom(const table_info_sync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(table_info_sync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.table_info_sync";
  }
  protected:
  explicit table_info_sync(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fmsg_2eproto);
    return ::descriptor_table_game_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kTableNoFieldNumber = 1,
    kDealerPosFieldNumber = 3,
    kActionPosFieldNumber = 4,
    kMinBatFieldNumber = 5,
  };
  // repeated .game.table_seat_player players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::game::table_seat_player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::table_seat_player >*
      mutable_players();
  private:
  const ::game::table_seat_player& _internal_players(int index) const;
  ::game::table_seat_player* _internal_add_players();
  public:
  const ::game::table_seat_player& players(int index) const;
  ::game::table_seat_player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::table_seat_player >&
      players() const;

  // int32 table_no = 1;
  void clear_table_no();
  ::PROTOBUF_NAMESPACE_ID::int32 table_no() const;
  void set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_table_no() const;
  void _internal_set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dealer_pos = 3;
  void clear_dealer_pos();
  ::PROTOBUF_NAMESPACE_ID::int32 dealer_pos() const;
  void set_dealer_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dealer_pos() const;
  void _internal_set_dealer_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 action_pos = 4;
  void clear_action_pos();
  ::PROTOBUF_NAMESPACE_ID::int32 action_pos() const;
  void set_action_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action_pos() const;
  void _internal_set_action_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_bat = 5;
  void clear_min_bat();
  ::PROTOBUF_NAMESPACE_ID::int32 min_bat() const;
  void set_min_bat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_bat() const;
  void _internal_set_min_bat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.table_info_sync)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::table_seat_player > players_;
  ::PROTOBUF_NAMESPACE_ID::int32 table_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 dealer_pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_bat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class player_sit_down_req PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.player_sit_down_req) */ {
 public:
  inline player_sit_down_req() : player_sit_down_req(nullptr) {}
  virtual ~player_sit_down_req();

  player_sit_down_req(const player_sit_down_req& from);
  player_sit_down_req(player_sit_down_req&& from) noexcept
    : player_sit_down_req() {
    *this = ::std::move(from);
  }

  inline player_sit_down_req& operator=(const player_sit_down_req& from) {
    CopyFrom(from);
    return *this;
  }
  inline player_sit_down_req& operator=(player_sit_down_req&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const player_sit_down_req& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const player_sit_down_req* internal_default_instance() {
    return reinterpret_cast<const player_sit_down_req*>(
               &_player_sit_down_req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(player_sit_down_req& a, player_sit_down_req& b) {
    a.Swap(&b);
  }
  inline void Swap(player_sit_down_req* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(player_sit_down_req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline player_sit_down_req* New() const final {
    return CreateMaybeMessage<player_sit_down_req>(nullptr);
  }

  player_sit_down_req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<player_sit_down_req>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const player_sit_down_req& from);
  void MergeFrom(const player_sit_down_req& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(player_sit_down_req* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.player_sit_down_req";
  }
  protected:
  explicit player_sit_down_req(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fmsg_2eproto);
    return ::descriptor_table_game_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeatNoFieldNumber = 1,
    kCarryCashFieldNumber = 2,
  };
  // int32 seat_no = 1;
  void clear_seat_no();
  ::PROTOBUF_NAMESPACE_ID::int32 seat_no() const;
  void set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seat_no() const;
  void _internal_set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 carry_cash = 2;
  void clear_carry_cash();
  ::PROTOBUF_NAMESPACE_ID::int32 carry_cash() const;
  void set_carry_cash(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_carry_cash() const;
  void _internal_set_carry_cash(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.player_sit_down_req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 seat_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 carry_cash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class game_poker_card PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.game_poker_card) */ {
 public:
  inline game_poker_card() : game_poker_card(nullptr) {}
  virtual ~game_poker_card();

  game_poker_card(const game_poker_card& from);
  game_poker_card(game_poker_card&& from) noexcept
    : game_poker_card() {
    *this = ::std::move(from);
  }

  inline game_poker_card& operator=(const game_poker_card& from) {
    CopyFrom(from);
    return *this;
  }
  inline game_poker_card& operator=(game_poker_card&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const game_poker_card& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const game_poker_card* internal_default_instance() {
    return reinterpret_cast<const game_poker_card*>(
               &_game_poker_card_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(game_poker_card& a, game_poker_card& b) {
    a.Swap(&b);
  }
  inline void Swap(game_poker_card* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(game_poker_card* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline game_poker_card* New() const final {
    return CreateMaybeMessage<game_poker_card>(nullptr);
  }

  game_poker_card* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<game_poker_card>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const game_poker_card& from);
  void MergeFrom(const game_poker_card& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(game_poker_card* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.game_poker_card";
  }
  protected:
  explicit game_poker_card(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fmsg_2eproto);
    return ::descriptor_table_game_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 1,
    kNumberFieldNumber = 2,
  };
  // int32 color = 1;
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::int32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 number = 2;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int32 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_number() const;
  void _internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.game_poker_card)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class player_self_info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.player_self_info) */ {
 public:
  inline player_self_info() : player_self_info(nullptr) {}
  virtual ~player_self_info();

  player_self_info(const player_self_info& from);
  player_self_info(player_self_info&& from) noexcept
    : player_self_info() {
    *this = ::std::move(from);
  }

  inline player_self_info& operator=(const player_self_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline player_self_info& operator=(player_self_info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const player_self_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const player_self_info* internal_default_instance() {
    return reinterpret_cast<const player_self_info*>(
               &_player_self_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(player_self_info& a, player_self_info& b) {
    a.Swap(&b);
  }
  inline void Swap(player_self_info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(player_self_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline player_self_info* New() const final {
    return CreateMaybeMessage<player_self_info>(nullptr);
  }

  player_self_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<player_self_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const player_self_info& from);
  void MergeFrom(const player_self_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(player_self_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.player_self_info";
  }
  protected:
  explicit player_self_info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fmsg_2eproto);
    return ::descriptor_table_game_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeatNoFieldNumber = 1,
  };
  // int32 seat_no = 1;
  void clear_seat_no();
  ::PROTOBUF_NAMESPACE_ID::int32 seat_no() const;
  void set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seat_no() const;
  void _internal_set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.player_self_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 seat_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class player_hand_card_info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.player_hand_card_info) */ {
 public:
  inline player_hand_card_info() : player_hand_card_info(nullptr) {}
  virtual ~player_hand_card_info();

  player_hand_card_info(const player_hand_card_info& from);
  player_hand_card_info(player_hand_card_info&& from) noexcept
    : player_hand_card_info() {
    *this = ::std::move(from);
  }

  inline player_hand_card_info& operator=(const player_hand_card_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline player_hand_card_info& operator=(player_hand_card_info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const player_hand_card_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const player_hand_card_info* internal_default_instance() {
    return reinterpret_cast<const player_hand_card_info*>(
               &_player_hand_card_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(player_hand_card_info& a, player_hand_card_info& b) {
    a.Swap(&b);
  }
  inline void Swap(player_hand_card_info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(player_hand_card_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline player_hand_card_info* New() const final {
    return CreateMaybeMessage<player_hand_card_info>(nullptr);
  }

  player_hand_card_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<player_hand_card_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const player_hand_card_info& from);
  void MergeFrom(const player_hand_card_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(player_hand_card_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.player_hand_card_info";
  }
  protected:
  explicit player_hand_card_info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fmsg_2eproto);
    return ::descriptor_table_game_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstFieldNumber = 1,
    kSecondFieldNumber = 2,
  };
  // .game.game_poker_card first = 1;
  bool has_first() const;
  private:
  bool _internal_has_first() const;
  public:
  void clear_first();
  const ::game::game_poker_card& first() const;
  ::game::game_poker_card* release_first();
  ::game::game_poker_card* mutable_first();
  void set_allocated_first(::game::game_poker_card* first);
  private:
  const ::game::game_poker_card& _internal_first() const;
  ::game::game_poker_card* _internal_mutable_first();
  public:
  void unsafe_arena_set_allocated_first(
      ::game::game_poker_card* first);
  ::game::game_poker_card* unsafe_arena_release_first();

  // .game.game_poker_card second = 2;
  bool has_second() const;
  private:
  bool _internal_has_second() const;
  public:
  void clear_second();
  const ::game::game_poker_card& second() const;
  ::game::game_poker_card* release_second();
  ::game::game_poker_card* mutable_second();
  void set_allocated_second(::game::game_poker_card* second);
  private:
  const ::game::game_poker_card& _internal_second() const;
  ::game::game_poker_card* _internal_mutable_second();
  public:
  void unsafe_arena_set_allocated_second(
      ::game::game_poker_card* second);
  ::game::game_poker_card* unsafe_arena_release_second();

  // @@protoc_insertion_point(class_scope:game.player_hand_card_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::game::game_poker_card* first_;
  ::game::game_poker_card* second_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class player_action PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.player_action) */ {
 public:
  inline player_action() : player_action(nullptr) {}
  virtual ~player_action();

  player_action(const player_action& from);
  player_action(player_action&& from) noexcept
    : player_action() {
    *this = ::std::move(from);
  }

  inline player_action& operator=(const player_action& from) {
    CopyFrom(from);
    return *this;
  }
  inline player_action& operator=(player_action&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const player_action& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const player_action* internal_default_instance() {
    return reinterpret_cast<const player_action*>(
               &_player_action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(player_action& a, player_action& b) {
    a.Swap(&b);
  }
  inline void Swap(player_action* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(player_action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline player_action* New() const final {
    return CreateMaybeMessage<player_action>(nullptr);
  }

  player_action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<player_action>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const player_action& from);
  void MergeFrom(const player_action& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(player_action* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.player_action";
  }
  protected:
  explicit player_action(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fmsg_2eproto);
    return ::descriptor_table_game_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kCashFieldNumber = 2,
  };
  // int32 action = 1;
  void clear_action();
  ::PROTOBUF_NAMESPACE_ID::int32 action() const;
  void set_action(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action() const;
  void _internal_set_action(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cash = 2;
  void clear_cash();
  ::PROTOBUF_NAMESPACE_ID::int32 cash() const;
  void set_cash(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cash() const;
  void _internal_set_cash(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.player_action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_;
  ::PROTOBUF_NAMESPACE_ID::int32 cash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// sync_session

// string session = 1;
inline void sync_session::clear_session() {
  session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& sync_session::session() const {
  // @@protoc_insertion_point(field_get:game.sync_session.session)
  return _internal_session();
}
inline void sync_session::set_session(const std::string& value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:game.sync_session.session)
}
inline std::string* sync_session::mutable_session() {
  // @@protoc_insertion_point(field_mutable:game.sync_session.session)
  return _internal_mutable_session();
}
inline const std::string& sync_session::_internal_session() const {
  return session_.Get();
}
inline void sync_session::_internal_set_session(const std::string& value) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void sync_session::set_session(std::string&& value) {
  
  session_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:game.sync_session.session)
}
inline void sync_session::set_session(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:game.sync_session.session)
}
inline void sync_session::set_session(const char* value,
    size_t size) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:game.sync_session.session)
}
inline std::string* sync_session::_internal_mutable_session() {
  
  return session_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* sync_session::release_session() {
  // @@protoc_insertion_point(field_release:game.sync_session.session)
  return session_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void sync_session::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    
  } else {
    
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:game.sync_session.session)
}

// int32 table_no = 2;
inline void sync_session::clear_table_no() {
  table_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sync_session::_internal_table_no() const {
  return table_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 sync_session::table_no() const {
  // @@protoc_insertion_point(field_get:game.sync_session.table_no)
  return _internal_table_no();
}
inline void sync_session::_internal_set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_no_ = value;
}
inline void sync_session::set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_no(value);
  // @@protoc_insertion_point(field_set:game.sync_session.table_no)
}

// -------------------------------------------------------------------

// game_mng_result

// bool result = 1;
inline void game_mng_result::clear_result() {
  result_ = false;
}
inline bool game_mng_result::_internal_result() const {
  return result_;
}
inline bool game_mng_result::result() const {
  // @@protoc_insertion_point(field_get:game.game_mng_result.result)
  return _internal_result();
}
inline void game_mng_result::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void game_mng_result::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:game.game_mng_result.result)
}

// -------------------------------------------------------------------

// user_login

// string code = 1;
inline void user_login::clear_code() {
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& user_login::code() const {
  // @@protoc_insertion_point(field_get:game.user_login.code)
  return _internal_code();
}
inline void user_login::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:game.user_login.code)
}
inline std::string* user_login::mutable_code() {
  // @@protoc_insertion_point(field_mutable:game.user_login.code)
  return _internal_mutable_code();
}
inline const std::string& user_login::_internal_code() const {
  return code_.Get();
}
inline void user_login::_internal_set_code(const std::string& value) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void user_login::set_code(std::string&& value) {
  
  code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:game.user_login.code)
}
inline void user_login::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:game.user_login.code)
}
inline void user_login::set_code(const char* value,
    size_t size) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:game.user_login.code)
}
inline std::string* user_login::_internal_mutable_code() {
  
  return code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* user_login::release_code() {
  // @@protoc_insertion_point(field_release:game.user_login.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_login::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:game.user_login.code)
}

// -------------------------------------------------------------------

// user_qq_login

// string openid = 1;
inline void user_qq_login::clear_openid() {
  openid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& user_qq_login::openid() const {
  // @@protoc_insertion_point(field_get:game.user_qq_login.openid)
  return _internal_openid();
}
inline void user_qq_login::set_openid(const std::string& value) {
  _internal_set_openid(value);
  // @@protoc_insertion_point(field_set:game.user_qq_login.openid)
}
inline std::string* user_qq_login::mutable_openid() {
  // @@protoc_insertion_point(field_mutable:game.user_qq_login.openid)
  return _internal_mutable_openid();
}
inline const std::string& user_qq_login::_internal_openid() const {
  return openid_.Get();
}
inline void user_qq_login::_internal_set_openid(const std::string& value) {
  
  openid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void user_qq_login::set_openid(std::string&& value) {
  
  openid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:game.user_qq_login.openid)
}
inline void user_qq_login::set_openid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  openid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:game.user_qq_login.openid)
}
inline void user_qq_login::set_openid(const char* value,
    size_t size) {
  
  openid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:game.user_qq_login.openid)
}
inline std::string* user_qq_login::_internal_mutable_openid() {
  
  return openid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* user_qq_login::release_openid() {
  // @@protoc_insertion_point(field_release:game.user_qq_login.openid)
  return openid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_qq_login::set_allocated_openid(std::string* openid) {
  if (openid != nullptr) {
    
  } else {
    
  }
  openid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), openid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:game.user_qq_login.openid)
}

// string acctok = 2;
inline void user_qq_login::clear_acctok() {
  acctok_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& user_qq_login::acctok() const {
  // @@protoc_insertion_point(field_get:game.user_qq_login.acctok)
  return _internal_acctok();
}
inline void user_qq_login::set_acctok(const std::string& value) {
  _internal_set_acctok(value);
  // @@protoc_insertion_point(field_set:game.user_qq_login.acctok)
}
inline std::string* user_qq_login::mutable_acctok() {
  // @@protoc_insertion_point(field_mutable:game.user_qq_login.acctok)
  return _internal_mutable_acctok();
}
inline const std::string& user_qq_login::_internal_acctok() const {
  return acctok_.Get();
}
inline void user_qq_login::_internal_set_acctok(const std::string& value) {
  
  acctok_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void user_qq_login::set_acctok(std::string&& value) {
  
  acctok_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:game.user_qq_login.acctok)
}
inline void user_qq_login::set_acctok(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  acctok_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:game.user_qq_login.acctok)
}
inline void user_qq_login::set_acctok(const char* value,
    size_t size) {
  
  acctok_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:game.user_qq_login.acctok)
}
inline std::string* user_qq_login::_internal_mutable_acctok() {
  
  return acctok_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* user_qq_login::release_acctok() {
  // @@protoc_insertion_point(field_release:game.user_qq_login.acctok)
  return acctok_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_qq_login::set_allocated_acctok(std::string* acctok) {
  if (acctok != nullptr) {
    
  } else {
    
  }
  acctok_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), acctok,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:game.user_qq_login.acctok)
}

// -------------------------------------------------------------------

// user_login_resp

// bool result = 1;
inline void user_login_resp::clear_result() {
  result_ = false;
}
inline bool user_login_resp::_internal_result() const {
  return result_;
}
inline bool user_login_resp::result() const {
  // @@protoc_insertion_point(field_get:game.user_login_resp.result)
  return _internal_result();
}
inline void user_login_resp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void user_login_resp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:game.user_login_resp.result)
}

// string session = 2;
inline void user_login_resp::clear_session() {
  session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& user_login_resp::session() const {
  // @@protoc_insertion_point(field_get:game.user_login_resp.session)
  return _internal_session();
}
inline void user_login_resp::set_session(const std::string& value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:game.user_login_resp.session)
}
inline std::string* user_login_resp::mutable_session() {
  // @@protoc_insertion_point(field_mutable:game.user_login_resp.session)
  return _internal_mutable_session();
}
inline const std::string& user_login_resp::_internal_session() const {
  return session_.Get();
}
inline void user_login_resp::_internal_set_session(const std::string& value) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void user_login_resp::set_session(std::string&& value) {
  
  session_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:game.user_login_resp.session)
}
inline void user_login_resp::set_session(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:game.user_login_resp.session)
}
inline void user_login_resp::set_session(const char* value,
    size_t size) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:game.user_login_resp.session)
}
inline std::string* user_login_resp::_internal_mutable_session() {
  
  return session_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* user_login_resp::release_session() {
  // @@protoc_insertion_point(field_release:game.user_login_resp.session)
  return session_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_login_resp::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    
  } else {
    
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:game.user_login_resp.session)
}

// -------------------------------------------------------------------

// user_info_resp

// string user_name = 1;
inline void user_info_resp::clear_user_name() {
  user_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& user_info_resp::user_name() const {
  // @@protoc_insertion_point(field_get:game.user_info_resp.user_name)
  return _internal_user_name();
}
inline void user_info_resp::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:game.user_info_resp.user_name)
}
inline std::string* user_info_resp::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:game.user_info_resp.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& user_info_resp::_internal_user_name() const {
  return user_name_.Get();
}
inline void user_info_resp::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void user_info_resp::set_user_name(std::string&& value) {
  
  user_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:game.user_info_resp.user_name)
}
inline void user_info_resp::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:game.user_info_resp.user_name)
}
inline void user_info_resp::set_user_name(const char* value,
    size_t size) {
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:game.user_info_resp.user_name)
}
inline std::string* user_info_resp::_internal_mutable_user_name() {
  
  return user_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* user_info_resp::release_user_name() {
  // @@protoc_insertion_point(field_release:game.user_info_resp.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_info_resp::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:game.user_info_resp.user_name)
}

// string user_logo = 2;
inline void user_info_resp::clear_user_logo() {
  user_logo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& user_info_resp::user_logo() const {
  // @@protoc_insertion_point(field_get:game.user_info_resp.user_logo)
  return _internal_user_logo();
}
inline void user_info_resp::set_user_logo(const std::string& value) {
  _internal_set_user_logo(value);
  // @@protoc_insertion_point(field_set:game.user_info_resp.user_logo)
}
inline std::string* user_info_resp::mutable_user_logo() {
  // @@protoc_insertion_point(field_mutable:game.user_info_resp.user_logo)
  return _internal_mutable_user_logo();
}
inline const std::string& user_info_resp::_internal_user_logo() const {
  return user_logo_.Get();
}
inline void user_info_resp::_internal_set_user_logo(const std::string& value) {
  
  user_logo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void user_info_resp::set_user_logo(std::string&& value) {
  
  user_logo_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:game.user_info_resp.user_logo)
}
inline void user_info_resp::set_user_logo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_logo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:game.user_info_resp.user_logo)
}
inline void user_info_resp::set_user_logo(const char* value,
    size_t size) {
  
  user_logo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:game.user_info_resp.user_logo)
}
inline std::string* user_info_resp::_internal_mutable_user_logo() {
  
  return user_logo_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* user_info_resp::release_user_logo() {
  // @@protoc_insertion_point(field_release:game.user_info_resp.user_logo)
  return user_logo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_info_resp::set_allocated_user_logo(std::string* user_logo) {
  if (user_logo != nullptr) {
    
  } else {
    
  }
  user_logo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_logo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:game.user_info_resp.user_logo)
}

// int32 user_cash = 3;
inline void user_info_resp::clear_user_cash() {
  user_cash_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_info_resp::_internal_user_cash() const {
  return user_cash_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_info_resp::user_cash() const {
  // @@protoc_insertion_point(field_get:game.user_info_resp.user_cash)
  return _internal_user_cash();
}
inline void user_info_resp::_internal_set_user_cash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_cash_ = value;
}
inline void user_info_resp::set_user_cash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_cash(value);
  // @@protoc_insertion_point(field_set:game.user_info_resp.user_cash)
}

// int32 table_no = 4;
inline void user_info_resp::clear_table_no() {
  table_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_info_resp::_internal_table_no() const {
  return table_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_info_resp::table_no() const {
  // @@protoc_insertion_point(field_get:game.user_info_resp.table_no)
  return _internal_table_no();
}
inline void user_info_resp::_internal_set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_no_ = value;
}
inline void user_info_resp::set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_no(value);
  // @@protoc_insertion_point(field_set:game.user_info_resp.table_no)
}

// int32 seat_no = 5;
inline void user_info_resp::clear_seat_no() {
  seat_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_info_resp::_internal_seat_no() const {
  return seat_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_info_resp::seat_no() const {
  // @@protoc_insertion_point(field_get:game.user_info_resp.seat_no)
  return _internal_seat_no();
}
inline void user_info_resp::_internal_set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seat_no_ = value;
}
inline void user_info_resp::set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seat_no(value);
  // @@protoc_insertion_point(field_set:game.user_info_resp.seat_no)
}

// -------------------------------------------------------------------

// add_cash_req

// string ssid = 1;
inline void add_cash_req::clear_ssid() {
  ssid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& add_cash_req::ssid() const {
  // @@protoc_insertion_point(field_get:game.add_cash_req.ssid)
  return _internal_ssid();
}
inline void add_cash_req::set_ssid(const std::string& value) {
  _internal_set_ssid(value);
  // @@protoc_insertion_point(field_set:game.add_cash_req.ssid)
}
inline std::string* add_cash_req::mutable_ssid() {
  // @@protoc_insertion_point(field_mutable:game.add_cash_req.ssid)
  return _internal_mutable_ssid();
}
inline const std::string& add_cash_req::_internal_ssid() const {
  return ssid_.Get();
}
inline void add_cash_req::_internal_set_ssid(const std::string& value) {
  
  ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void add_cash_req::set_ssid(std::string&& value) {
  
  ssid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:game.add_cash_req.ssid)
}
inline void add_cash_req::set_ssid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:game.add_cash_req.ssid)
}
inline void add_cash_req::set_ssid(const char* value,
    size_t size) {
  
  ssid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:game.add_cash_req.ssid)
}
inline std::string* add_cash_req::_internal_mutable_ssid() {
  
  return ssid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* add_cash_req::release_ssid() {
  // @@protoc_insertion_point(field_release:game.add_cash_req.ssid)
  return ssid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void add_cash_req::set_allocated_ssid(std::string* ssid) {
  if (ssid != nullptr) {
    
  } else {
    
  }
  ssid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:game.add_cash_req.ssid)
}

// int32 cash = 2;
inline void add_cash_req::clear_cash() {
  cash_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 add_cash_req::_internal_cash() const {
  return cash_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 add_cash_req::cash() const {
  // @@protoc_insertion_point(field_get:game.add_cash_req.cash)
  return _internal_cash();
}
inline void add_cash_req::_internal_set_cash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cash_ = value;
}
inline void add_cash_req::set_cash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cash(value);
  // @@protoc_insertion_point(field_set:game.add_cash_req.cash)
}

// -------------------------------------------------------------------

// create_table_resp

// bool result = 1;
inline void create_table_resp::clear_result() {
  result_ = false;
}
inline bool create_table_resp::_internal_result() const {
  return result_;
}
inline bool create_table_resp::result() const {
  // @@protoc_insertion_point(field_get:game.create_table_resp.result)
  return _internal_result();
}
inline void create_table_resp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void create_table_resp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:game.create_table_resp.result)
}

// int32 table_no = 2;
inline void create_table_resp::clear_table_no() {
  table_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 create_table_resp::_internal_table_no() const {
  return table_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 create_table_resp::table_no() const {
  // @@protoc_insertion_point(field_get:game.create_table_resp.table_no)
  return _internal_table_no();
}
inline void create_table_resp::_internal_set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_no_ = value;
}
inline void create_table_resp::set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_no(value);
  // @@protoc_insertion_point(field_set:game.create_table_resp.table_no)
}

// -------------------------------------------------------------------

// table_seat_player

// int32 seat_no = 1;
inline void table_seat_player::clear_seat_no() {
  seat_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 table_seat_player::_internal_seat_no() const {
  return seat_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 table_seat_player::seat_no() const {
  // @@protoc_insertion_point(field_get:game.table_seat_player.seat_no)
  return _internal_seat_no();
}
inline void table_seat_player::_internal_set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seat_no_ = value;
}
inline void table_seat_player::set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seat_no(value);
  // @@protoc_insertion_point(field_set:game.table_seat_player.seat_no)
}

// string name = 2;
inline void table_seat_player::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& table_seat_player::name() const {
  // @@protoc_insertion_point(field_get:game.table_seat_player.name)
  return _internal_name();
}
inline void table_seat_player::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:game.table_seat_player.name)
}
inline std::string* table_seat_player::mutable_name() {
  // @@protoc_insertion_point(field_mutable:game.table_seat_player.name)
  return _internal_mutable_name();
}
inline const std::string& table_seat_player::_internal_name() const {
  return name_.Get();
}
inline void table_seat_player::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void table_seat_player::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:game.table_seat_player.name)
}
inline void table_seat_player::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:game.table_seat_player.name)
}
inline void table_seat_player::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:game.table_seat_player.name)
}
inline std::string* table_seat_player::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* table_seat_player::release_name() {
  // @@protoc_insertion_point(field_release:game.table_seat_player.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void table_seat_player::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:game.table_seat_player.name)
}

// int32 total_cash = 3;
inline void table_seat_player::clear_total_cash() {
  total_cash_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 table_seat_player::_internal_total_cash() const {
  return total_cash_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 table_seat_player::total_cash() const {
  // @@protoc_insertion_point(field_get:game.table_seat_player.total_cash)
  return _internal_total_cash();
}
inline void table_seat_player::_internal_set_total_cash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_cash_ = value;
}
inline void table_seat_player::set_total_cash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_cash(value);
  // @@protoc_insertion_point(field_set:game.table_seat_player.total_cash)
}

// int32 bat_cash = 4;
inline void table_seat_player::clear_bat_cash() {
  bat_cash_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 table_seat_player::_internal_bat_cash() const {
  return bat_cash_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 table_seat_player::bat_cash() const {
  // @@protoc_insertion_point(field_get:game.table_seat_player.bat_cash)
  return _internal_bat_cash();
}
inline void table_seat_player::_internal_set_bat_cash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bat_cash_ = value;
}
inline void table_seat_player::set_bat_cash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bat_cash(value);
  // @@protoc_insertion_point(field_set:game.table_seat_player.bat_cash)
}

// string logo = 5;
inline void table_seat_player::clear_logo() {
  logo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& table_seat_player::logo() const {
  // @@protoc_insertion_point(field_get:game.table_seat_player.logo)
  return _internal_logo();
}
inline void table_seat_player::set_logo(const std::string& value) {
  _internal_set_logo(value);
  // @@protoc_insertion_point(field_set:game.table_seat_player.logo)
}
inline std::string* table_seat_player::mutable_logo() {
  // @@protoc_insertion_point(field_mutable:game.table_seat_player.logo)
  return _internal_mutable_logo();
}
inline const std::string& table_seat_player::_internal_logo() const {
  return logo_.Get();
}
inline void table_seat_player::_internal_set_logo(const std::string& value) {
  
  logo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void table_seat_player::set_logo(std::string&& value) {
  
  logo_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:game.table_seat_player.logo)
}
inline void table_seat_player::set_logo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:game.table_seat_player.logo)
}
inline void table_seat_player::set_logo(const char* value,
    size_t size) {
  
  logo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:game.table_seat_player.logo)
}
inline std::string* table_seat_player::_internal_mutable_logo() {
  
  return logo_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* table_seat_player::release_logo() {
  // @@protoc_insertion_point(field_release:game.table_seat_player.logo)
  return logo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void table_seat_player::set_allocated_logo(std::string* logo) {
  if (logo != nullptr) {
    
  } else {
    
  }
  logo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:game.table_seat_player.logo)
}

// bool is_fall = 6;
inline void table_seat_player::clear_is_fall() {
  is_fall_ = false;
}
inline bool table_seat_player::_internal_is_fall() const {
  return is_fall_;
}
inline bool table_seat_player::is_fall() const {
  // @@protoc_insertion_point(field_get:game.table_seat_player.is_fall)
  return _internal_is_fall();
}
inline void table_seat_player::_internal_set_is_fall(bool value) {
  
  is_fall_ = value;
}
inline void table_seat_player::set_is_fall(bool value) {
  _internal_set_is_fall(value);
  // @@protoc_insertion_point(field_set:game.table_seat_player.is_fall)
}

// bool is_all_in = 7;
inline void table_seat_player::clear_is_all_in() {
  is_all_in_ = false;
}
inline bool table_seat_player::_internal_is_all_in() const {
  return is_all_in_;
}
inline bool table_seat_player::is_all_in() const {
  // @@protoc_insertion_point(field_get:game.table_seat_player.is_all_in)
  return _internal_is_all_in();
}
inline void table_seat_player::_internal_set_is_all_in(bool value) {
  
  is_all_in_ = value;
}
inline void table_seat_player::set_is_all_in(bool value) {
  _internal_set_is_all_in(value);
  // @@protoc_insertion_point(field_set:game.table_seat_player.is_all_in)
}

// -------------------------------------------------------------------

// table_info_sync

// int32 table_no = 1;
inline void table_info_sync::clear_table_no() {
  table_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 table_info_sync::_internal_table_no() const {
  return table_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 table_info_sync::table_no() const {
  // @@protoc_insertion_point(field_get:game.table_info_sync.table_no)
  return _internal_table_no();
}
inline void table_info_sync::_internal_set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  table_no_ = value;
}
inline void table_info_sync::set_table_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_table_no(value);
  // @@protoc_insertion_point(field_set:game.table_info_sync.table_no)
}

// repeated .game.table_seat_player players = 2;
inline int table_info_sync::_internal_players_size() const {
  return players_.size();
}
inline int table_info_sync::players_size() const {
  return _internal_players_size();
}
inline void table_info_sync::clear_players() {
  players_.Clear();
}
inline ::game::table_seat_player* table_info_sync::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:game.table_info_sync.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::table_seat_player >*
table_info_sync::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:game.table_info_sync.players)
  return &players_;
}
inline const ::game::table_seat_player& table_info_sync::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::game::table_seat_player& table_info_sync::players(int index) const {
  // @@protoc_insertion_point(field_get:game.table_info_sync.players)
  return _internal_players(index);
}
inline ::game::table_seat_player* table_info_sync::_internal_add_players() {
  return players_.Add();
}
inline ::game::table_seat_player* table_info_sync::add_players() {
  // @@protoc_insertion_point(field_add:game.table_info_sync.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::table_seat_player >&
table_info_sync::players() const {
  // @@protoc_insertion_point(field_list:game.table_info_sync.players)
  return players_;
}

// int32 dealer_pos = 3;
inline void table_info_sync::clear_dealer_pos() {
  dealer_pos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 table_info_sync::_internal_dealer_pos() const {
  return dealer_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 table_info_sync::dealer_pos() const {
  // @@protoc_insertion_point(field_get:game.table_info_sync.dealer_pos)
  return _internal_dealer_pos();
}
inline void table_info_sync::_internal_set_dealer_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dealer_pos_ = value;
}
inline void table_info_sync::set_dealer_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dealer_pos(value);
  // @@protoc_insertion_point(field_set:game.table_info_sync.dealer_pos)
}

// int32 action_pos = 4;
inline void table_info_sync::clear_action_pos() {
  action_pos_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 table_info_sync::_internal_action_pos() const {
  return action_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 table_info_sync::action_pos() const {
  // @@protoc_insertion_point(field_get:game.table_info_sync.action_pos)
  return _internal_action_pos();
}
inline void table_info_sync::_internal_set_action_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  action_pos_ = value;
}
inline void table_info_sync::set_action_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action_pos(value);
  // @@protoc_insertion_point(field_set:game.table_info_sync.action_pos)
}

// int32 min_bat = 5;
inline void table_info_sync::clear_min_bat() {
  min_bat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 table_info_sync::_internal_min_bat() const {
  return min_bat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 table_info_sync::min_bat() const {
  // @@protoc_insertion_point(field_get:game.table_info_sync.min_bat)
  return _internal_min_bat();
}
inline void table_info_sync::_internal_set_min_bat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_bat_ = value;
}
inline void table_info_sync::set_min_bat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_bat(value);
  // @@protoc_insertion_point(field_set:game.table_info_sync.min_bat)
}

// -------------------------------------------------------------------

// player_sit_down_req

// int32 seat_no = 1;
inline void player_sit_down_req::clear_seat_no() {
  seat_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 player_sit_down_req::_internal_seat_no() const {
  return seat_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 player_sit_down_req::seat_no() const {
  // @@protoc_insertion_point(field_get:game.player_sit_down_req.seat_no)
  return _internal_seat_no();
}
inline void player_sit_down_req::_internal_set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seat_no_ = value;
}
inline void player_sit_down_req::set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seat_no(value);
  // @@protoc_insertion_point(field_set:game.player_sit_down_req.seat_no)
}

// int32 carry_cash = 2;
inline void player_sit_down_req::clear_carry_cash() {
  carry_cash_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 player_sit_down_req::_internal_carry_cash() const {
  return carry_cash_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 player_sit_down_req::carry_cash() const {
  // @@protoc_insertion_point(field_get:game.player_sit_down_req.carry_cash)
  return _internal_carry_cash();
}
inline void player_sit_down_req::_internal_set_carry_cash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  carry_cash_ = value;
}
inline void player_sit_down_req::set_carry_cash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_carry_cash(value);
  // @@protoc_insertion_point(field_set:game.player_sit_down_req.carry_cash)
}

// -------------------------------------------------------------------

// game_poker_card

// int32 color = 1;
inline void game_poker_card::clear_color() {
  color_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 game_poker_card::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 game_poker_card::color() const {
  // @@protoc_insertion_point(field_get:game.game_poker_card.color)
  return _internal_color();
}
inline void game_poker_card::_internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  color_ = value;
}
inline void game_poker_card::set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:game.game_poker_card.color)
}

// int32 number = 2;
inline void game_poker_card::clear_number() {
  number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 game_poker_card::_internal_number() const {
  return number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 game_poker_card::number() const {
  // @@protoc_insertion_point(field_get:game.game_poker_card.number)
  return _internal_number();
}
inline void game_poker_card::_internal_set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  number_ = value;
}
inline void game_poker_card::set_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:game.game_poker_card.number)
}

// -------------------------------------------------------------------

// player_self_info

// int32 seat_no = 1;
inline void player_self_info::clear_seat_no() {
  seat_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 player_self_info::_internal_seat_no() const {
  return seat_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 player_self_info::seat_no() const {
  // @@protoc_insertion_point(field_get:game.player_self_info.seat_no)
  return _internal_seat_no();
}
inline void player_self_info::_internal_set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seat_no_ = value;
}
inline void player_self_info::set_seat_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seat_no(value);
  // @@protoc_insertion_point(field_set:game.player_self_info.seat_no)
}

// -------------------------------------------------------------------

// player_hand_card_info

// .game.game_poker_card first = 1;
inline bool player_hand_card_info::_internal_has_first() const {
  return this != internal_default_instance() && first_ != nullptr;
}
inline bool player_hand_card_info::has_first() const {
  return _internal_has_first();
}
inline void player_hand_card_info::clear_first() {
  if (GetArena() == nullptr && first_ != nullptr) {
    delete first_;
  }
  first_ = nullptr;
}
inline const ::game::game_poker_card& player_hand_card_info::_internal_first() const {
  const ::game::game_poker_card* p = first_;
  return p != nullptr ? *p : *reinterpret_cast<const ::game::game_poker_card*>(
      &::game::_game_poker_card_default_instance_);
}
inline const ::game::game_poker_card& player_hand_card_info::first() const {
  // @@protoc_insertion_point(field_get:game.player_hand_card_info.first)
  return _internal_first();
}
inline void player_hand_card_info::unsafe_arena_set_allocated_first(
    ::game::game_poker_card* first) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(first_);
  }
  first_ = first;
  if (first) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.player_hand_card_info.first)
}
inline ::game::game_poker_card* player_hand_card_info::release_first() {
  
  ::game::game_poker_card* temp = first_;
  first_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::game::game_poker_card* player_hand_card_info::unsafe_arena_release_first() {
  // @@protoc_insertion_point(field_release:game.player_hand_card_info.first)
  
  ::game::game_poker_card* temp = first_;
  first_ = nullptr;
  return temp;
}
inline ::game::game_poker_card* player_hand_card_info::_internal_mutable_first() {
  
  if (first_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::game_poker_card>(GetArena());
    first_ = p;
  }
  return first_;
}
inline ::game::game_poker_card* player_hand_card_info::mutable_first() {
  // @@protoc_insertion_point(field_mutable:game.player_hand_card_info.first)
  return _internal_mutable_first();
}
inline void player_hand_card_info::set_allocated_first(::game::game_poker_card* first) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete first_;
  }
  if (first) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(first);
    if (message_arena != submessage_arena) {
      first = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, first, submessage_arena);
    }
    
  } else {
    
  }
  first_ = first;
  // @@protoc_insertion_point(field_set_allocated:game.player_hand_card_info.first)
}

// .game.game_poker_card second = 2;
inline bool player_hand_card_info::_internal_has_second() const {
  return this != internal_default_instance() && second_ != nullptr;
}
inline bool player_hand_card_info::has_second() const {
  return _internal_has_second();
}
inline void player_hand_card_info::clear_second() {
  if (GetArena() == nullptr && second_ != nullptr) {
    delete second_;
  }
  second_ = nullptr;
}
inline const ::game::game_poker_card& player_hand_card_info::_internal_second() const {
  const ::game::game_poker_card* p = second_;
  return p != nullptr ? *p : *reinterpret_cast<const ::game::game_poker_card*>(
      &::game::_game_poker_card_default_instance_);
}
inline const ::game::game_poker_card& player_hand_card_info::second() const {
  // @@protoc_insertion_point(field_get:game.player_hand_card_info.second)
  return _internal_second();
}
inline void player_hand_card_info::unsafe_arena_set_allocated_second(
    ::game::game_poker_card* second) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(second_);
  }
  second_ = second;
  if (second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.player_hand_card_info.second)
}
inline ::game::game_poker_card* player_hand_card_info::release_second() {
  
  ::game::game_poker_card* temp = second_;
  second_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::game::game_poker_card* player_hand_card_info::unsafe_arena_release_second() {
  // @@protoc_insertion_point(field_release:game.player_hand_card_info.second)
  
  ::game::game_poker_card* temp = second_;
  second_ = nullptr;
  return temp;
}
inline ::game::game_poker_card* player_hand_card_info::_internal_mutable_second() {
  
  if (second_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::game_poker_card>(GetArena());
    second_ = p;
  }
  return second_;
}
inline ::game::game_poker_card* player_hand_card_info::mutable_second() {
  // @@protoc_insertion_point(field_mutable:game.player_hand_card_info.second)
  return _internal_mutable_second();
}
inline void player_hand_card_info::set_allocated_second(::game::game_poker_card* second) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete second_;
  }
  if (second) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(second);
    if (message_arena != submessage_arena) {
      second = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, second, submessage_arena);
    }
    
  } else {
    
  }
  second_ = second;
  // @@protoc_insertion_point(field_set_allocated:game.player_hand_card_info.second)
}

// -------------------------------------------------------------------

// player_action

// int32 action = 1;
inline void player_action::clear_action() {
  action_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 player_action::_internal_action() const {
  return action_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 player_action::action() const {
  // @@protoc_insertion_point(field_get:game.player_action.action)
  return _internal_action();
}
inline void player_action::_internal_set_action(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  action_ = value;
}
inline void player_action::set_action(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:game.player_action.action)
}

// int32 cash = 2;
inline void player_action::clear_cash() {
  cash_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 player_action::_internal_cash() const {
  return cash_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 player_action::cash() const {
  // @@protoc_insertion_point(field_get:game.player_action.cash)
  return _internal_cash();
}
inline void player_action::_internal_set_cash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cash_ = value;
}
inline void player_action::set_cash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cash(value);
  // @@protoc_insertion_point(field_set:game.player_action.cash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_5fmsg_2eproto
