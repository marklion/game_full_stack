// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fmsg_2eproto;
namespace game {
class game_mng_result;
class game_mng_resultDefaultTypeInternal;
extern game_mng_resultDefaultTypeInternal _game_mng_result_default_instance_;
class sync_session;
class sync_sessionDefaultTypeInternal;
extern sync_sessionDefaultTypeInternal _sync_session_default_instance_;
class user_info_resp;
class user_info_respDefaultTypeInternal;
extern user_info_respDefaultTypeInternal _user_info_resp_default_instance_;
class user_login;
class user_loginDefaultTypeInternal;
extern user_loginDefaultTypeInternal _user_login_default_instance_;
class user_login_resp;
class user_login_respDefaultTypeInternal;
extern user_login_respDefaultTypeInternal _user_login_resp_default_instance_;
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::game_mng_result* Arena::CreateMaybeMessage<::game::game_mng_result>(Arena*);
template<> ::game::sync_session* Arena::CreateMaybeMessage<::game::sync_session>(Arena*);
template<> ::game::user_info_resp* Arena::CreateMaybeMessage<::game::user_info_resp>(Arena*);
template<> ::game::user_login* Arena::CreateMaybeMessage<::game::user_login>(Arena*);
template<> ::game::user_login_resp* Arena::CreateMaybeMessage<::game::user_login_resp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {

// ===================================================================

class sync_session PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.sync_session) */ {
 public:
  inline sync_session() : sync_session(nullptr) {}
  virtual ~sync_session();

  sync_session(const sync_session& from);
  sync_session(sync_session&& from) noexcept
    : sync_session() {
    *this = ::std::move(from);
  }

  inline sync_session& operator=(const sync_session& from) {
    CopyFrom(from);
    return *this;
  }
  inline sync_session& operator=(sync_session&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const sync_session& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sync_session* internal_default_instance() {
    return reinterpret_cast<const sync_session*>(
               &_sync_session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(sync_session& a, sync_session& b) {
    a.Swap(&b);
  }
  inline void Swap(sync_session* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(sync_session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sync_session* New() const final {
    return CreateMaybeMessage<sync_session>(nullptr);
  }

  sync_session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sync_session>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const sync_session& from);
  void MergeFrom(const sync_session& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sync_session* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.sync_session";
  }
  protected:
  explicit sync_session(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fmsg_2eproto);
    return ::descriptor_table_game_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
  };
  // string session = 1;
  void clear_session();
  const std::string& session() const;
  void set_session(const std::string& value);
  void set_session(std::string&& value);
  void set_session(const char* value);
  void set_session(const char* value, size_t size);
  std::string* mutable_session();
  std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // @@protoc_insertion_point(class_scope:game.sync_session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class game_mng_result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.game_mng_result) */ {
 public:
  inline game_mng_result() : game_mng_result(nullptr) {}
  virtual ~game_mng_result();

  game_mng_result(const game_mng_result& from);
  game_mng_result(game_mng_result&& from) noexcept
    : game_mng_result() {
    *this = ::std::move(from);
  }

  inline game_mng_result& operator=(const game_mng_result& from) {
    CopyFrom(from);
    return *this;
  }
  inline game_mng_result& operator=(game_mng_result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const game_mng_result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const game_mng_result* internal_default_instance() {
    return reinterpret_cast<const game_mng_result*>(
               &_game_mng_result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(game_mng_result& a, game_mng_result& b) {
    a.Swap(&b);
  }
  inline void Swap(game_mng_result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(game_mng_result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline game_mng_result* New() const final {
    return CreateMaybeMessage<game_mng_result>(nullptr);
  }

  game_mng_result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<game_mng_result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const game_mng_result& from);
  void MergeFrom(const game_mng_result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(game_mng_result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.game_mng_result";
  }
  protected:
  explicit game_mng_result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fmsg_2eproto);
    return ::descriptor_table_game_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.game_mng_result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class user_login PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.user_login) */ {
 public:
  inline user_login() : user_login(nullptr) {}
  virtual ~user_login();

  user_login(const user_login& from);
  user_login(user_login&& from) noexcept
    : user_login() {
    *this = ::std::move(from);
  }

  inline user_login& operator=(const user_login& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_login& operator=(user_login&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user_login& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user_login* internal_default_instance() {
    return reinterpret_cast<const user_login*>(
               &_user_login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(user_login& a, user_login& b) {
    a.Swap(&b);
  }
  inline void Swap(user_login* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_login* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_login* New() const final {
    return CreateMaybeMessage<user_login>(nullptr);
  }

  user_login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_login>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user_login& from);
  void MergeFrom(const user_login& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_login* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.user_login";
  }
  protected:
  explicit user_login(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fmsg_2eproto);
    return ::descriptor_table_game_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // @@protoc_insertion_point(class_scope:game.user_login)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class user_login_resp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.user_login_resp) */ {
 public:
  inline user_login_resp() : user_login_resp(nullptr) {}
  virtual ~user_login_resp();

  user_login_resp(const user_login_resp& from);
  user_login_resp(user_login_resp&& from) noexcept
    : user_login_resp() {
    *this = ::std::move(from);
  }

  inline user_login_resp& operator=(const user_login_resp& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_login_resp& operator=(user_login_resp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user_login_resp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user_login_resp* internal_default_instance() {
    return reinterpret_cast<const user_login_resp*>(
               &_user_login_resp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(user_login_resp& a, user_login_resp& b) {
    a.Swap(&b);
  }
  inline void Swap(user_login_resp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_login_resp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_login_resp* New() const final {
    return CreateMaybeMessage<user_login_resp>(nullptr);
  }

  user_login_resp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_login_resp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user_login_resp& from);
  void MergeFrom(const user_login_resp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_login_resp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.user_login_resp";
  }
  protected:
  explicit user_login_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fmsg_2eproto);
    return ::descriptor_table_game_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string session = 2;
  void clear_session();
  const std::string& session() const;
  void set_session(const std::string& value);
  void set_session(std::string&& value);
  void set_session(const char* value);
  void set_session(const char* value, size_t size);
  std::string* mutable_session();
  std::string* release_session();
  void set_allocated_session(std::string* session);
  private:
  const std::string& _internal_session() const;
  void _internal_set_session(const std::string& value);
  std::string* _internal_mutable_session();
  public:

  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.user_login_resp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_;
  bool result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class user_info_resp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.user_info_resp) */ {
 public:
  inline user_info_resp() : user_info_resp(nullptr) {}
  virtual ~user_info_resp();

  user_info_resp(const user_info_resp& from);
  user_info_resp(user_info_resp&& from) noexcept
    : user_info_resp() {
    *this = ::std::move(from);
  }

  inline user_info_resp& operator=(const user_info_resp& from) {
    CopyFrom(from);
    return *this;
  }
  inline user_info_resp& operator=(user_info_resp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user_info_resp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user_info_resp* internal_default_instance() {
    return reinterpret_cast<const user_info_resp*>(
               &_user_info_resp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(user_info_resp& a, user_info_resp& b) {
    a.Swap(&b);
  }
  inline void Swap(user_info_resp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(user_info_resp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user_info_resp* New() const final {
    return CreateMaybeMessage<user_info_resp>(nullptr);
  }

  user_info_resp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user_info_resp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user_info_resp& from);
  void MergeFrom(const user_info_resp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user_info_resp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.user_info_resp";
  }
  protected:
  explicit user_info_resp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_game_5fmsg_2eproto);
    return ::descriptor_table_game_5fmsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kUserLogoFieldNumber = 2,
    kUserCashFieldNumber = 3,
  };
  // string user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string user_logo = 2;
  void clear_user_logo();
  const std::string& user_logo() const;
  void set_user_logo(const std::string& value);
  void set_user_logo(std::string&& value);
  void set_user_logo(const char* value);
  void set_user_logo(const char* value, size_t size);
  std::string* mutable_user_logo();
  std::string* release_user_logo();
  void set_allocated_user_logo(std::string* user_logo);
  private:
  const std::string& _internal_user_logo() const;
  void _internal_set_user_logo(const std::string& value);
  std::string* _internal_mutable_user_logo();
  public:

  // int32 user_cash = 3;
  void clear_user_cash();
  ::PROTOBUF_NAMESPACE_ID::int32 user_cash() const;
  void set_user_cash(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_cash() const;
  void _internal_set_user_cash(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:game.user_info_resp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_logo_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_cash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// sync_session

// string session = 1;
inline void sync_session::clear_session() {
  session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& sync_session::session() const {
  // @@protoc_insertion_point(field_get:game.sync_session.session)
  return _internal_session();
}
inline void sync_session::set_session(const std::string& value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:game.sync_session.session)
}
inline std::string* sync_session::mutable_session() {
  // @@protoc_insertion_point(field_mutable:game.sync_session.session)
  return _internal_mutable_session();
}
inline const std::string& sync_session::_internal_session() const {
  return session_.Get();
}
inline void sync_session::_internal_set_session(const std::string& value) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void sync_session::set_session(std::string&& value) {
  
  session_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:game.sync_session.session)
}
inline void sync_session::set_session(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:game.sync_session.session)
}
inline void sync_session::set_session(const char* value,
    size_t size) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:game.sync_session.session)
}
inline std::string* sync_session::_internal_mutable_session() {
  
  return session_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* sync_session::release_session() {
  // @@protoc_insertion_point(field_release:game.sync_session.session)
  return session_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void sync_session::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    
  } else {
    
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:game.sync_session.session)
}

// -------------------------------------------------------------------

// game_mng_result

// bool result = 1;
inline void game_mng_result::clear_result() {
  result_ = false;
}
inline bool game_mng_result::_internal_result() const {
  return result_;
}
inline bool game_mng_result::result() const {
  // @@protoc_insertion_point(field_get:game.game_mng_result.result)
  return _internal_result();
}
inline void game_mng_result::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void game_mng_result::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:game.game_mng_result.result)
}

// -------------------------------------------------------------------

// user_login

// string code = 1;
inline void user_login::clear_code() {
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& user_login::code() const {
  // @@protoc_insertion_point(field_get:game.user_login.code)
  return _internal_code();
}
inline void user_login::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:game.user_login.code)
}
inline std::string* user_login::mutable_code() {
  // @@protoc_insertion_point(field_mutable:game.user_login.code)
  return _internal_mutable_code();
}
inline const std::string& user_login::_internal_code() const {
  return code_.Get();
}
inline void user_login::_internal_set_code(const std::string& value) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void user_login::set_code(std::string&& value) {
  
  code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:game.user_login.code)
}
inline void user_login::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:game.user_login.code)
}
inline void user_login::set_code(const char* value,
    size_t size) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:game.user_login.code)
}
inline std::string* user_login::_internal_mutable_code() {
  
  return code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* user_login::release_code() {
  // @@protoc_insertion_point(field_release:game.user_login.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_login::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:game.user_login.code)
}

// -------------------------------------------------------------------

// user_login_resp

// bool result = 1;
inline void user_login_resp::clear_result() {
  result_ = false;
}
inline bool user_login_resp::_internal_result() const {
  return result_;
}
inline bool user_login_resp::result() const {
  // @@protoc_insertion_point(field_get:game.user_login_resp.result)
  return _internal_result();
}
inline void user_login_resp::_internal_set_result(bool value) {
  
  result_ = value;
}
inline void user_login_resp::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:game.user_login_resp.result)
}

// string session = 2;
inline void user_login_resp::clear_session() {
  session_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& user_login_resp::session() const {
  // @@protoc_insertion_point(field_get:game.user_login_resp.session)
  return _internal_session();
}
inline void user_login_resp::set_session(const std::string& value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:game.user_login_resp.session)
}
inline std::string* user_login_resp::mutable_session() {
  // @@protoc_insertion_point(field_mutable:game.user_login_resp.session)
  return _internal_mutable_session();
}
inline const std::string& user_login_resp::_internal_session() const {
  return session_.Get();
}
inline void user_login_resp::_internal_set_session(const std::string& value) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void user_login_resp::set_session(std::string&& value) {
  
  session_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:game.user_login_resp.session)
}
inline void user_login_resp::set_session(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:game.user_login_resp.session)
}
inline void user_login_resp::set_session(const char* value,
    size_t size) {
  
  session_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:game.user_login_resp.session)
}
inline std::string* user_login_resp::_internal_mutable_session() {
  
  return session_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* user_login_resp::release_session() {
  // @@protoc_insertion_point(field_release:game.user_login_resp.session)
  return session_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_login_resp::set_allocated_session(std::string* session) {
  if (session != nullptr) {
    
  } else {
    
  }
  session_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:game.user_login_resp.session)
}

// -------------------------------------------------------------------

// user_info_resp

// string user_name = 1;
inline void user_info_resp::clear_user_name() {
  user_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& user_info_resp::user_name() const {
  // @@protoc_insertion_point(field_get:game.user_info_resp.user_name)
  return _internal_user_name();
}
inline void user_info_resp::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:game.user_info_resp.user_name)
}
inline std::string* user_info_resp::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:game.user_info_resp.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& user_info_resp::_internal_user_name() const {
  return user_name_.Get();
}
inline void user_info_resp::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void user_info_resp::set_user_name(std::string&& value) {
  
  user_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:game.user_info_resp.user_name)
}
inline void user_info_resp::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:game.user_info_resp.user_name)
}
inline void user_info_resp::set_user_name(const char* value,
    size_t size) {
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:game.user_info_resp.user_name)
}
inline std::string* user_info_resp::_internal_mutable_user_name() {
  
  return user_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* user_info_resp::release_user_name() {
  // @@protoc_insertion_point(field_release:game.user_info_resp.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_info_resp::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:game.user_info_resp.user_name)
}

// string user_logo = 2;
inline void user_info_resp::clear_user_logo() {
  user_logo_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& user_info_resp::user_logo() const {
  // @@protoc_insertion_point(field_get:game.user_info_resp.user_logo)
  return _internal_user_logo();
}
inline void user_info_resp::set_user_logo(const std::string& value) {
  _internal_set_user_logo(value);
  // @@protoc_insertion_point(field_set:game.user_info_resp.user_logo)
}
inline std::string* user_info_resp::mutable_user_logo() {
  // @@protoc_insertion_point(field_mutable:game.user_info_resp.user_logo)
  return _internal_mutable_user_logo();
}
inline const std::string& user_info_resp::_internal_user_logo() const {
  return user_logo_.Get();
}
inline void user_info_resp::_internal_set_user_logo(const std::string& value) {
  
  user_logo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void user_info_resp::set_user_logo(std::string&& value) {
  
  user_logo_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:game.user_info_resp.user_logo)
}
inline void user_info_resp::set_user_logo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_logo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:game.user_info_resp.user_logo)
}
inline void user_info_resp::set_user_logo(const char* value,
    size_t size) {
  
  user_logo_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:game.user_info_resp.user_logo)
}
inline std::string* user_info_resp::_internal_mutable_user_logo() {
  
  return user_logo_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* user_info_resp::release_user_logo() {
  // @@protoc_insertion_point(field_release:game.user_info_resp.user_logo)
  return user_logo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void user_info_resp::set_allocated_user_logo(std::string* user_logo) {
  if (user_logo != nullptr) {
    
  } else {
    
  }
  user_logo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_logo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:game.user_info_resp.user_logo)
}

// int32 user_cash = 3;
inline void user_info_resp::clear_user_cash() {
  user_cash_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_info_resp::_internal_user_cash() const {
  return user_cash_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 user_info_resp::user_cash() const {
  // @@protoc_insertion_point(field_get:game.user_info_resp.user_cash)
  return _internal_user_cash();
}
inline void user_info_resp::_internal_set_user_cash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_cash_ = value;
}
inline void user_info_resp::set_user_cash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_cash(value);
  // @@protoc_insertion_point(field_set:game.user_info_resp.user_cash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace game

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_5fmsg_2eproto
